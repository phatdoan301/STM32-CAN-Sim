
CAN_HMI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b10  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  08003c1c  08003c1c  00004c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800442c  0800442c  00006064  2**0
                  CONTENTS
  4 .ARM          00000008  0800442c  0800442c  0000542c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004434  08004434  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004434  08004434  00005434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004438  08004438  00005438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800443c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000063c  20000064  080044a0  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a0  080044a0  000066a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d27  00000000  00000000  0000608d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ada  00000000  00000000  0000edb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  00010890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006e2  00000000  00000000  00011198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177de  00000000  00000000  0001187a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b901  00000000  00000000  00029058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085041  00000000  00000000  00034959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b999a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b4  00000000  00000000  000b99e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000bc394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c04 	.word	0x08003c04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08003c04 	.word	0x08003c04

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <SH1106_Init>:
static SH1106_t SH1106;

#define SH1106_NORMALDISPLAY       0xA6
#define SH1106_INVERTDISPLAY       0xA7

uint8_t SH1106_Init(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SH1106_I2C, SH1106_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000162:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000166:	2201      	movs	r2, #1
 8000168:	2178      	movs	r1, #120	@ 0x78
 800016a:	484c      	ldr	r0, [pc, #304]	@ (800029c <SH1106_Init+0x140>)
 800016c:	f002 f902 	bl	8002374 <HAL_I2C_IsDeviceReady>
 8000170:	4603      	mov	r3, r0
 8000172:	2b00      	cmp	r3, #0
 8000174:	d001      	beq.n	800017a <SH1106_Init+0x1e>
		/* Return false */
		return 0;
 8000176:	2300      	movs	r3, #0
 8000178:	e08b      	b.n	8000292 <SH1106_Init+0x136>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800017a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800017e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000180:	e002      	b.n	8000188 <SH1106_Init+0x2c>
		p--;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	3b01      	subs	r3, #1
 8000186:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	2b00      	cmp	r3, #0
 800018c:	d1f9      	bne.n	8000182 <SH1106_Init+0x26>
	
	  // Initialize the display
	SH1106_WRITECOMMAND(0xAE); //display off
 800018e:	22ae      	movs	r2, #174	@ 0xae
 8000190:	2100      	movs	r1, #0
 8000192:	2078      	movs	r0, #120	@ 0x78
 8000194:	f000 fa62 	bl	800065c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xB0|0x00); //Set Page Start Address for Page Addressing Mode,0-7
 8000198:	22b0      	movs	r2, #176	@ 0xb0
 800019a:	2100      	movs	r1, #0
 800019c:	2078      	movs	r0, #120	@ 0x78
 800019e:	f000 fa5d 	bl	800065c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x81); //--set contrast control register
 80001a2:	2281      	movs	r2, #129	@ 0x81
 80001a4:	2100      	movs	r1, #0
 80001a6:	2078      	movs	r0, #120	@ 0x78
 80001a8:	f000 fa58 	bl	800065c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xFF); // contrast value
 80001ac:	22ff      	movs	r2, #255	@ 0xff
 80001ae:	2100      	movs	r1, #0
 80001b0:	2078      	movs	r0, #120	@ 0x78
 80001b2:	f000 fa53 	bl	800065c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80001b6:	22a1      	movs	r2, #161	@ 0xa1
 80001b8:	2100      	movs	r1, #0
 80001ba:	2078      	movs	r0, #120	@ 0x78
 80001bc:	f000 fa4e 	bl	800065c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA6); //--set normal display
 80001c0:	22a6      	movs	r2, #166	@ 0xa6
 80001c2:	2100      	movs	r1, #0
 80001c4:	2078      	movs	r0, #120	@ 0x78
 80001c6:	f000 fa49 	bl	800065c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80001ca:	22a8      	movs	r2, #168	@ 0xa8
 80001cc:	2100      	movs	r1, #0
 80001ce:	2078      	movs	r0, #120	@ 0x78
 80001d0:	f000 fa44 	bl	800065c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x3F); // multiplex value
 80001d4:	223f      	movs	r2, #63	@ 0x3f
 80001d6:	2100      	movs	r1, #0
 80001d8:	2078      	movs	r0, #120	@ 0x78
 80001da:	f000 fa3f 	bl	800065c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAD); // Set Pump Mode
 80001de:	22ad      	movs	r2, #173	@ 0xad
 80001e0:	2100      	movs	r1, #0
 80001e2:	2078      	movs	r0, #120	@ 0x78
 80001e4:	f000 fa3a 	bl	800065c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x8B); // Pump ON
 80001e8:	228b      	movs	r2, #139	@ 0x8b
 80001ea:	2100      	movs	r1, #0
 80001ec:	2078      	movs	r0, #120	@ 0x78
 80001ee:	f000 fa35 	bl	800065c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x30|0x02); // Set Pump Voltage 8.0
 80001f2:	2232      	movs	r2, #50	@ 0x32
 80001f4:	2100      	movs	r1, #0
 80001f6:	2078      	movs	r0, #120	@ 0x78
 80001f8:	f000 fa30 	bl	800065c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80001fc:	22c8      	movs	r2, #200	@ 0xc8
 80001fe:	2100      	movs	r1, #0
 8000200:	2078      	movs	r0, #120	@ 0x78
 8000202:	f000 fa2b 	bl	800065c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD3); //-set display offset
 8000206:	22d3      	movs	r2, #211	@ 0xd3
 8000208:	2100      	movs	r1, #0
 800020a:	2078      	movs	r0, #120	@ 0x78
 800020c:	f000 fa26 	bl	800065c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x00); //-not offset
 8000210:	2200      	movs	r2, #0
 8000212:	2100      	movs	r1, #0
 8000214:	2078      	movs	r0, #120	@ 0x78
 8000216:	f000 fa21 	bl	800065c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800021a:	22d5      	movs	r2, #213	@ 0xd5
 800021c:	2100      	movs	r1, #0
 800021e:	2078      	movs	r0, #120	@ 0x78
 8000220:	f000 fa1c 	bl	800065c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x80); //--set divide ratio
 8000224:	2280      	movs	r2, #128	@ 0x80
 8000226:	2100      	movs	r1, #0
 8000228:	2078      	movs	r0, #120	@ 0x78
 800022a:	f000 fa17 	bl	800065c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD9); //--set pre-charge period
 800022e:	22d9      	movs	r2, #217	@ 0xd9
 8000230:	2100      	movs	r1, #0
 8000232:	2078      	movs	r0, #120	@ 0x78
 8000234:	f000 fa12 	bl	800065c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x1F); //
 8000238:	221f      	movs	r2, #31
 800023a:	2100      	movs	r1, #0
 800023c:	2078      	movs	r0, #120	@ 0x78
 800023e:	f000 fa0d 	bl	800065c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000242:	22da      	movs	r2, #218	@ 0xda
 8000244:	2100      	movs	r1, #0
 8000246:	2078      	movs	r0, #120	@ 0x78
 8000248:	f000 fa08 	bl	800065c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x12);
 800024c:	2212      	movs	r2, #18
 800024e:	2100      	movs	r1, #0
 8000250:	2078      	movs	r0, #120	@ 0x78
 8000252:	f000 fa03 	bl	800065c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDB); //--set vcomh
 8000256:	22db      	movs	r2, #219	@ 0xdb
 8000258:	2100      	movs	r1, #0
 800025a:	2078      	movs	r0, #120	@ 0x78
 800025c:	f000 f9fe 	bl	800065c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x40); //
 8000260:	2240      	movs	r2, #64	@ 0x40
 8000262:	2100      	movs	r1, #0
 8000264:	2078      	movs	r0, #120	@ 0x78
 8000266:	f000 f9f9 	bl	800065c <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAF); //--turn on SH1106 panel
 800026a:	22af      	movs	r2, #175	@ 0xaf
 800026c:	2100      	movs	r1, #0
 800026e:	2078      	movs	r0, #120	@ 0x78
 8000270:	f000 f9f4 	bl	800065c <SH1106_I2C_Write>


	/* Clear screen */
	SH1106_Fill(SH1106_COLOR_BLACK);
 8000274:	2000      	movs	r0, #0
 8000276:	f000 f847 	bl	8000308 <SH1106_Fill>
	
	/* Update screen */
	SH1106_UpdateScreen();
 800027a:	f000 f813 	bl	80002a4 <SH1106_UpdateScreen>
	
	/* Set default values */
	SH1106.CurrentX = 0;
 800027e:	4b08      	ldr	r3, [pc, #32]	@ (80002a0 <SH1106_Init+0x144>)
 8000280:	2200      	movs	r2, #0
 8000282:	801a      	strh	r2, [r3, #0]
	SH1106.CurrentY = 0;
 8000284:	4b06      	ldr	r3, [pc, #24]	@ (80002a0 <SH1106_Init+0x144>)
 8000286:	2200      	movs	r2, #0
 8000288:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SH1106.Initialized = 1;
 800028a:	4b05      	ldr	r3, [pc, #20]	@ (80002a0 <SH1106_Init+0x144>)
 800028c:	2201      	movs	r2, #1
 800028e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000290:	2301      	movs	r3, #1
}
 8000292:	4618      	mov	r0, r3
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	200004d0 	.word	0x200004d0
 80002a0:	200004a0 	.word	0x200004a0

080002a4 <SH1106_UpdateScreen>:

void SH1106_UpdateScreen(void) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80002aa:	2300      	movs	r3, #0
 80002ac:	71fb      	strb	r3, [r7, #7]
 80002ae:	e021      	b.n	80002f4 <SH1106_UpdateScreen+0x50>
		SH1106_WRITECOMMAND(0xB0 + m);
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	3b50      	subs	r3, #80	@ 0x50
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	461a      	mov	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	2078      	movs	r0, #120	@ 0x78
 80002bc:	f000 f9ce 	bl	800065c <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x00);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2100      	movs	r1, #0
 80002c4:	2078      	movs	r0, #120	@ 0x78
 80002c6:	f000 f9c9 	bl	800065c <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x10);
 80002ca:	2210      	movs	r2, #16
 80002cc:	2100      	movs	r1, #0
 80002ce:	2078      	movs	r0, #120	@ 0x78
 80002d0:	f000 f9c4 	bl	800065c <SH1106_I2C_Write>
		
		/* Write multi data */
		SH1106_I2C_WriteMulti(SH1106_I2C_ADDR, 0x40, &SH1106_Buffer[SH1106_WIDTH * m], SH1106_WIDTH);
 80002d4:	79fa      	ldrb	r2, [r7, #7]
 80002d6:	4613      	mov	r3, r2
 80002d8:	015b      	lsls	r3, r3, #5
 80002da:	4413      	add	r3, r2
 80002dc:	009b      	lsls	r3, r3, #2
 80002de:	461a      	mov	r2, r3
 80002e0:	4b08      	ldr	r3, [pc, #32]	@ (8000304 <SH1106_UpdateScreen+0x60>)
 80002e2:	441a      	add	r2, r3
 80002e4:	2384      	movs	r3, #132	@ 0x84
 80002e6:	2140      	movs	r1, #64	@ 0x40
 80002e8:	2078      	movs	r0, #120	@ 0x78
 80002ea:	f000 f951 	bl	8000590 <SH1106_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	3301      	adds	r3, #1
 80002f2:	71fb      	strb	r3, [r7, #7]
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	2b07      	cmp	r3, #7
 80002f8:	d9da      	bls.n	80002b0 <SH1106_UpdateScreen+0xc>
	}
}
 80002fa:	bf00      	nop
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000080 	.word	0x20000080

08000308 <SH1106_Fill>:
	for (i = 0; i < sizeof(SH1106_Buffer); i++) {
		SH1106_Buffer[i] = ~SH1106_Buffer[i];
	}
}

void SH1106_Fill(SH1106_COLOR_t color) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SH1106_Buffer, (color == SH1106_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SH1106_Buffer));
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d101      	bne.n	800031c <SH1106_Fill+0x14>
 8000318:	2300      	movs	r3, #0
 800031a:	e000      	b.n	800031e <SH1106_Fill+0x16>
 800031c:	23ff      	movs	r3, #255	@ 0xff
 800031e:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 8000322:	4619      	mov	r1, r3
 8000324:	4803      	ldr	r0, [pc, #12]	@ (8000334 <SH1106_Fill+0x2c>)
 8000326:	f002 ffdd 	bl	80032e4 <memset>
}
 800032a:	bf00      	nop
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	20000080 	.word	0x20000080

08000338 <SH1106_DrawPixel>:

void SH1106_DrawPixel(uint16_t x, uint16_t y, SH1106_COLOR_t color) {
 8000338:	b490      	push	{r4, r7}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	80fb      	strh	r3, [r7, #6]
 8000342:	460b      	mov	r3, r1
 8000344:	80bb      	strh	r3, [r7, #4]
 8000346:	4613      	mov	r3, r2
 8000348:	70fb      	strb	r3, [r7, #3]
	if (
 800034a:	88fb      	ldrh	r3, [r7, #6]
 800034c:	2b83      	cmp	r3, #131	@ 0x83
 800034e:	d854      	bhi.n	80003fa <SH1106_DrawPixel+0xc2>
		x >= SH1106_WIDTH ||
 8000350:	88bb      	ldrh	r3, [r7, #4]
 8000352:	2b3f      	cmp	r3, #63	@ 0x3f
 8000354:	d851      	bhi.n	80003fa <SH1106_DrawPixel+0xc2>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SH1106.Inverted) {
 8000356:	4b2b      	ldr	r3, [pc, #172]	@ (8000404 <SH1106_DrawPixel+0xcc>)
 8000358:	791b      	ldrb	r3, [r3, #4]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d006      	beq.n	800036c <SH1106_DrawPixel+0x34>
		color = (SH1106_COLOR_t)!color;
 800035e:	78fb      	ldrb	r3, [r7, #3]
 8000360:	2b00      	cmp	r3, #0
 8000362:	bf0c      	ite	eq
 8000364:	2301      	moveq	r3, #1
 8000366:	2300      	movne	r3, #0
 8000368:	b2db      	uxtb	r3, r3
 800036a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SH1106_COLOR_WHITE) {
 800036c:	78fb      	ldrb	r3, [r7, #3]
 800036e:	2b01      	cmp	r3, #1
 8000370:	d120      	bne.n	80003b4 <SH1106_DrawPixel+0x7c>
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] |= 1 << (y % 8);
 8000372:	88fa      	ldrh	r2, [r7, #6]
 8000374:	88bb      	ldrh	r3, [r7, #4]
 8000376:	08db      	lsrs	r3, r3, #3
 8000378:	b298      	uxth	r0, r3
 800037a:	4601      	mov	r1, r0
 800037c:	460b      	mov	r3, r1
 800037e:	015b      	lsls	r3, r3, #5
 8000380:	440b      	add	r3, r1
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	4413      	add	r3, r2
 8000386:	4a20      	ldr	r2, [pc, #128]	@ (8000408 <SH1106_DrawPixel+0xd0>)
 8000388:	5cd3      	ldrb	r3, [r2, r3]
 800038a:	b25a      	sxtb	r2, r3
 800038c:	88bb      	ldrh	r3, [r7, #4]
 800038e:	f003 0307 	and.w	r3, r3, #7
 8000392:	2101      	movs	r1, #1
 8000394:	fa01 f303 	lsl.w	r3, r1, r3
 8000398:	b25b      	sxtb	r3, r3
 800039a:	4313      	orrs	r3, r2
 800039c:	b25c      	sxtb	r4, r3
 800039e:	88fa      	ldrh	r2, [r7, #6]
 80003a0:	4601      	mov	r1, r0
 80003a2:	460b      	mov	r3, r1
 80003a4:	015b      	lsls	r3, r3, #5
 80003a6:	440b      	add	r3, r1
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	4413      	add	r3, r2
 80003ac:	b2e1      	uxtb	r1, r4
 80003ae:	4a16      	ldr	r2, [pc, #88]	@ (8000408 <SH1106_DrawPixel+0xd0>)
 80003b0:	54d1      	strb	r1, [r2, r3]
 80003b2:	e023      	b.n	80003fc <SH1106_DrawPixel+0xc4>
	} else {
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] &= ~(1 << (y % 8));
 80003b4:	88fa      	ldrh	r2, [r7, #6]
 80003b6:	88bb      	ldrh	r3, [r7, #4]
 80003b8:	08db      	lsrs	r3, r3, #3
 80003ba:	b298      	uxth	r0, r3
 80003bc:	4601      	mov	r1, r0
 80003be:	460b      	mov	r3, r1
 80003c0:	015b      	lsls	r3, r3, #5
 80003c2:	440b      	add	r3, r1
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	4413      	add	r3, r2
 80003c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000408 <SH1106_DrawPixel+0xd0>)
 80003ca:	5cd3      	ldrb	r3, [r2, r3]
 80003cc:	b25a      	sxtb	r2, r3
 80003ce:	88bb      	ldrh	r3, [r7, #4]
 80003d0:	f003 0307 	and.w	r3, r3, #7
 80003d4:	2101      	movs	r1, #1
 80003d6:	fa01 f303 	lsl.w	r3, r1, r3
 80003da:	b25b      	sxtb	r3, r3
 80003dc:	43db      	mvns	r3, r3
 80003de:	b25b      	sxtb	r3, r3
 80003e0:	4013      	ands	r3, r2
 80003e2:	b25c      	sxtb	r4, r3
 80003e4:	88fa      	ldrh	r2, [r7, #6]
 80003e6:	4601      	mov	r1, r0
 80003e8:	460b      	mov	r3, r1
 80003ea:	015b      	lsls	r3, r3, #5
 80003ec:	440b      	add	r3, r1
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	4413      	add	r3, r2
 80003f2:	b2e1      	uxtb	r1, r4
 80003f4:	4a04      	ldr	r2, [pc, #16]	@ (8000408 <SH1106_DrawPixel+0xd0>)
 80003f6:	54d1      	strb	r1, [r2, r3]
 80003f8:	e000      	b.n	80003fc <SH1106_DrawPixel+0xc4>
		return;
 80003fa:	bf00      	nop
	}
}
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc90      	pop	{r4, r7}
 8000402:	4770      	bx	lr
 8000404:	200004a0 	.word	0x200004a0
 8000408:	20000080 	.word	0x20000080

0800040c <SH1106_GotoXY>:

void SH1106_GotoXY(uint16_t x, uint16_t y) {
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	460a      	mov	r2, r1
 8000416:	80fb      	strh	r3, [r7, #6]
 8000418:	4613      	mov	r3, r2
 800041a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SH1106.CurrentX = x;
 800041c:	4a05      	ldr	r2, [pc, #20]	@ (8000434 <SH1106_GotoXY+0x28>)
 800041e:	88fb      	ldrh	r3, [r7, #6]
 8000420:	8013      	strh	r3, [r2, #0]
	SH1106.CurrentY = y;
 8000422:	4a04      	ldr	r2, [pc, #16]	@ (8000434 <SH1106_GotoXY+0x28>)
 8000424:	88bb      	ldrh	r3, [r7, #4]
 8000426:	8053      	strh	r3, [r2, #2]
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	200004a0 	.word	0x200004a0

08000438 <SH1106_Putc>:

char SH1106_Putc(char ch, FontDef_t* Font, SH1106_COLOR_t color) {
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	6039      	str	r1, [r7, #0]
 8000442:	71fb      	strb	r3, [r7, #7]
 8000444:	4613      	mov	r3, r2
 8000446:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
 8000448:	4b39      	ldr	r3, [pc, #228]	@ (8000530 <SH1106_Putc+0xf8>)
 800044a:	881b      	ldrh	r3, [r3, #0]
 800044c:	461a      	mov	r2, r3
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	4413      	add	r3, r2
	if (
 8000454:	2b83      	cmp	r3, #131	@ 0x83
 8000456:	dc07      	bgt.n	8000468 <SH1106_Putc+0x30>
		SH1106_HEIGHT <= (SH1106.CurrentY + Font->FontHeight)
 8000458:	4b35      	ldr	r3, [pc, #212]	@ (8000530 <SH1106_Putc+0xf8>)
 800045a:	885b      	ldrh	r3, [r3, #2]
 800045c:	461a      	mov	r2, r3
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	785b      	ldrb	r3, [r3, #1]
 8000462:	4413      	add	r3, r2
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
 8000464:	2b3f      	cmp	r3, #63	@ 0x3f
 8000466:	dd01      	ble.n	800046c <SH1106_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000468:	2300      	movs	r3, #0
 800046a:	e05d      	b.n	8000528 <SH1106_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800046c:	2300      	movs	r3, #0
 800046e:	617b      	str	r3, [r7, #20]
 8000470:	e04b      	b.n	800050a <SH1106_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	685a      	ldr	r2, [r3, #4]
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	3b20      	subs	r3, #32
 800047a:	6839      	ldr	r1, [r7, #0]
 800047c:	7849      	ldrb	r1, [r1, #1]
 800047e:	fb01 f303 	mul.w	r3, r1, r3
 8000482:	4619      	mov	r1, r3
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	440b      	add	r3, r1
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	4413      	add	r3, r2
 800048c:	881b      	ldrh	r3, [r3, #0]
 800048e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000490:	2300      	movs	r3, #0
 8000492:	613b      	str	r3, [r7, #16]
 8000494:	e030      	b.n	80004f8 <SH1106_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000496:	68fa      	ldr	r2, [r7, #12]
 8000498:	693b      	ldr	r3, [r7, #16]
 800049a:	fa02 f303 	lsl.w	r3, r2, r3
 800049e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d010      	beq.n	80004c8 <SH1106_Putc+0x90>
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t) color);
 80004a6:	4b22      	ldr	r3, [pc, #136]	@ (8000530 <SH1106_Putc+0xf8>)
 80004a8:	881a      	ldrh	r2, [r3, #0]
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	4413      	add	r3, r2
 80004b0:	b298      	uxth	r0, r3
 80004b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000530 <SH1106_Putc+0xf8>)
 80004b4:	885a      	ldrh	r2, [r3, #2]
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	4413      	add	r3, r2
 80004bc:	b29b      	uxth	r3, r3
 80004be:	79ba      	ldrb	r2, [r7, #6]
 80004c0:	4619      	mov	r1, r3
 80004c2:	f7ff ff39 	bl	8000338 <SH1106_DrawPixel>
 80004c6:	e014      	b.n	80004f2 <SH1106_Putc+0xba>
			} else {
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t)!color);
 80004c8:	4b19      	ldr	r3, [pc, #100]	@ (8000530 <SH1106_Putc+0xf8>)
 80004ca:	881a      	ldrh	r2, [r3, #0]
 80004cc:	693b      	ldr	r3, [r7, #16]
 80004ce:	b29b      	uxth	r3, r3
 80004d0:	4413      	add	r3, r2
 80004d2:	b298      	uxth	r0, r3
 80004d4:	4b16      	ldr	r3, [pc, #88]	@ (8000530 <SH1106_Putc+0xf8>)
 80004d6:	885a      	ldrh	r2, [r3, #2]
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	b29b      	uxth	r3, r3
 80004dc:	4413      	add	r3, r2
 80004de:	b299      	uxth	r1, r3
 80004e0:	79bb      	ldrb	r3, [r7, #6]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	bf0c      	ite	eq
 80004e6:	2301      	moveq	r3, #1
 80004e8:	2300      	movne	r3, #0
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	461a      	mov	r2, r3
 80004ee:	f7ff ff23 	bl	8000338 <SH1106_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80004f2:	693b      	ldr	r3, [r7, #16]
 80004f4:	3301      	adds	r3, #1
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	461a      	mov	r2, r3
 80004fe:	693b      	ldr	r3, [r7, #16]
 8000500:	4293      	cmp	r3, r2
 8000502:	d3c8      	bcc.n	8000496 <SH1106_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	3301      	adds	r3, #1
 8000508:	617b      	str	r3, [r7, #20]
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	785b      	ldrb	r3, [r3, #1]
 800050e:	461a      	mov	r2, r3
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	4293      	cmp	r3, r2
 8000514:	d3ad      	bcc.n	8000472 <SH1106_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SH1106.CurrentX += Font->FontWidth;
 8000516:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <SH1106_Putc+0xf8>)
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	683a      	ldr	r2, [r7, #0]
 800051c:	7812      	ldrb	r2, [r2, #0]
 800051e:	4413      	add	r3, r2
 8000520:	b29a      	uxth	r2, r3
 8000522:	4b03      	ldr	r3, [pc, #12]	@ (8000530 <SH1106_Putc+0xf8>)
 8000524:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000526:	79fb      	ldrb	r3, [r7, #7]
}
 8000528:	4618      	mov	r0, r3
 800052a:	3718      	adds	r7, #24
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	200004a0 	.word	0x200004a0

08000534 <SH1106_Puts>:

char SH1106_Puts(char* str, FontDef_t* Font, SH1106_COLOR_t color) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	4613      	mov	r3, r2
 8000540:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000542:	e012      	b.n	800056a <SH1106_Puts+0x36>
		/* Write character by character */
		if (SH1106_Putc(*str, Font, color) != *str) {
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	79fa      	ldrb	r2, [r7, #7]
 800054a:	68b9      	ldr	r1, [r7, #8]
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff ff73 	bl	8000438 <SH1106_Putc>
 8000552:	4603      	mov	r3, r0
 8000554:	461a      	mov	r2, r3
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	429a      	cmp	r2, r3
 800055c:	d002      	beq.n	8000564 <SH1106_Puts+0x30>
			/* Return error */
			return *str;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	e008      	b.n	8000576 <SH1106_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	3301      	adds	r3, #1
 8000568:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d1e8      	bne.n	8000544 <SH1106_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	781b      	ldrb	r3, [r3, #0]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <SH1106_Clear>:
}
 


void SH1106_Clear (void)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	af00      	add	r7, sp, #0
	SH1106_Fill (0);
 8000582:	2000      	movs	r0, #0
 8000584:	f7ff fec0 	bl	8000308 <SH1106_Fill>
    SH1106_UpdateScreen();
 8000588:	f7ff fe8c 	bl	80002a4 <SH1106_UpdateScreen>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}

08000590 <SH1106_I2C_WriteMulti>:
	SH1106_WRITECOMMAND(0x10);
	SH1106_WRITECOMMAND(0xAE);
}

void SH1106_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b0c7      	sub	sp, #284	@ 0x11c
 8000594:	af02      	add	r7, sp, #8
 8000596:	4604      	mov	r4, r0
 8000598:	4608      	mov	r0, r1
 800059a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800059e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80005a2:	600a      	str	r2, [r1, #0]
 80005a4:	4619      	mov	r1, r3
 80005a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005aa:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80005ae:	4622      	mov	r2, r4
 80005b0:	701a      	strb	r2, [r3, #0]
 80005b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005b6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80005ba:	4602      	mov	r2, r0
 80005bc:	701a      	strb	r2, [r3, #0]
 80005be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80005c6:	460a      	mov	r2, r1
 80005c8:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 80005ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80005d2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80005d6:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80005da:	7812      	ldrb	r2, [r2, #0]
 80005dc:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 80005de:	2300      	movs	r3, #0
 80005e0:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80005e4:	e015      	b.n	8000612 <SH1106_I2C_WriteMulti+0x82>
	{
		dt[i+1] = data[i];
 80005e6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80005ea:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80005ee:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80005f2:	6812      	ldr	r2, [r2, #0]
 80005f4:	441a      	add	r2, r3
 80005f6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80005fa:	3301      	adds	r3, #1
 80005fc:	7811      	ldrb	r1, [r2, #0]
 80005fe:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000602:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000606:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8000608:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800060c:	3301      	adds	r3, #1
 800060e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000612:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000616:	b29b      	uxth	r3, r3
 8000618:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800061c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000620:	8812      	ldrh	r2, [r2, #0]
 8000622:	429a      	cmp	r2, r3
 8000624:	d8df      	bhi.n	80005e6 <SH1106_I2C_WriteMulti+0x56>
	}
	HAL_I2C_Master_Transmit(SH1106_I2C, address, dt, count+1, 10);
 8000626:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800062a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b299      	uxth	r1, r3
 8000632:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000636:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	b29b      	uxth	r3, r3
 8000640:	f107 020c 	add.w	r2, r7, #12
 8000644:	200a      	movs	r0, #10
 8000646:	9000      	str	r0, [sp, #0]
 8000648:	4803      	ldr	r0, [pc, #12]	@ (8000658 <SH1106_I2C_WriteMulti+0xc8>)
 800064a:	f001 fd95 	bl	8002178 <HAL_I2C_Master_Transmit>
}
 800064e:	bf00      	nop
 8000650:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000654:	46bd      	mov	sp, r7
 8000656:	bd90      	pop	{r4, r7, pc}
 8000658:	200004d0 	.word	0x200004d0

0800065c <SH1106_I2C_Write>:


void SH1106_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af02      	add	r7, sp, #8
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
 8000666:	460b      	mov	r3, r1
 8000668:	71bb      	strb	r3, [r7, #6]
 800066a:	4613      	mov	r3, r2
 800066c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800066e:	79bb      	ldrb	r3, [r7, #6]
 8000670:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000672:	797b      	ldrb	r3, [r7, #5]
 8000674:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SH1106_I2C, address, dt, 2, 10);
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	b299      	uxth	r1, r3
 800067a:	f107 020c 	add.w	r2, r7, #12
 800067e:	230a      	movs	r3, #10
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2302      	movs	r3, #2
 8000684:	4803      	ldr	r0, [pc, #12]	@ (8000694 <SH1106_I2C_Write+0x38>)
 8000686:	f001 fd77 	bl	8002178 <HAL_I2C_Master_Transmit>
}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200004d0 	.word	0x200004d0

08000698 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    //DBG("HAL_CAN_RxFifo0MsgPendingCallback");
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 80006a0:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80006a2:	4a0e      	ldr	r2, [pc, #56]	@ (80006dc <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80006a4:	2100      	movs	r1, #0
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f000 fe0e 	bl	80012c8 <HAL_CAN_GetRxMessage>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d10e      	bne.n	80006d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
    {
    	speed = RxData[0];
 80006b2:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80006ba:	801a      	strh	r2, [r3, #0]
    	mode = RxData[1];
 80006bc:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80006be:	785b      	ldrb	r3, [r3, #1]
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80006c4:	801a      	strh	r2, [r3, #0]
    	direction = RxData[2];
 80006c6:	4b04      	ldr	r3, [pc, #16]	@ (80006d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80006c8:	789b      	ldrb	r3, [r3, #2]
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80006ce:	801a      	strh	r2, [r3, #0]
    }
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000540 	.word	0x20000540
 80006dc:	20000524 	.word	0x20000524
 80006e0:	20000548 	.word	0x20000548
 80006e4:	2000054a 	.word	0x2000054a
 80006e8:	2000054c 	.word	0x2000054c

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	@ 0x30
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f000 fb5b 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f8bd 	bl	8000874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f000 f965 	bl	80009c8 <MX_GPIO_Init>
  MX_CAN_Init();
 80006fe:	f000 f8ff 	bl	8000900 <MX_CAN_Init>
  MX_I2C1_Init();
 8000702:	f000 f933 	bl	800096c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SH1106_Init();
 8000706:	f7ff fd29 	bl	800015c <SH1106_Init>

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800070a:	2301      	movs	r3, #1
 800070c:	62bb      	str	r3, [r7, #40]	@ 0x28
  canfilterconfig.FilterBank = 12;  // anything between 0 to SlaveStartFilterBank
 800070e:	230c      	movs	r3, #12
 8000710:	61fb      	str	r3, [r7, #28]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterIdHigh = 0x200<<5;
 8000716:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800071a:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterIdLow = 0x0000;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
      //canfilterconfig.FilterMaskIdHigh = 0x1<<13;
  canfilterconfig.FilterMaskIdHigh = 0x200<<5;
 8000720:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000724:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterMaskIdLow = 0x0;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800072a:	2300      	movs	r3, #0
 800072c:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800072e:	2301      	movs	r3, #1
 8000730:	627b      	str	r3, [r7, #36]	@ 0x24
  canfilterconfig.SlaveStartFilterBank = 13;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 8000732:	230d      	movs	r3, #13
 8000734:	62fb      	str	r3, [r7, #44]	@ 0x2c

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	4619      	mov	r1, r3
 800073c:	483f      	ldr	r0, [pc, #252]	@ (800083c <main+0x150>)
 800073e:	f000 fcb6 	bl	80010ae <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 8000742:	483e      	ldr	r0, [pc, #248]	@ (800083c <main+0x150>)
 8000744:	f000 fd7c 	bl	8001240 <HAL_CAN_Start>

  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000748:	2102      	movs	r1, #2
 800074a:	483c      	ldr	r0, [pc, #240]	@ (800083c <main+0x150>)
 800074c:	f000 fedd 	bl	800150a <HAL_CAN_ActivateNotification>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <main+0x6e>
  {
	  Error_Handler();
 8000756:	f000 f98f 	bl	8000a78 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SH1106_Clear();
 800075a:	f7ff ff10 	bl	800057e <SH1106_Clear>
	  char buffer[8];
	  snprintf(buffer, sizeof(buffer), "%u", speed);
 800075e:	4b38      	ldr	r3, [pc, #224]	@ (8000840 <main+0x154>)
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	4638      	mov	r0, r7
 8000764:	4a37      	ldr	r2, [pc, #220]	@ (8000844 <main+0x158>)
 8000766:	2108      	movs	r1, #8
 8000768:	f002 fd88 	bl	800327c <sniprintf>
	  SH1106_GotoXY(2,0);
 800076c:	2100      	movs	r1, #0
 800076e:	2002      	movs	r0, #2
 8000770:	f7ff fe4c 	bl	800040c <SH1106_GotoXY>
	  SH1106_Puts("Speed: ", &Font_7x10, SH1106_COLOR_WHITE);
 8000774:	2201      	movs	r2, #1
 8000776:	4934      	ldr	r1, [pc, #208]	@ (8000848 <main+0x15c>)
 8000778:	4834      	ldr	r0, [pc, #208]	@ (800084c <main+0x160>)
 800077a:	f7ff fedb 	bl	8000534 <SH1106_Puts>
	  SH1106_GotoXY(45,0);
 800077e:	2100      	movs	r1, #0
 8000780:	202d      	movs	r0, #45	@ 0x2d
 8000782:	f7ff fe43 	bl	800040c <SH1106_GotoXY>
	  SH1106_Puts(buffer, &Font_7x10, SH1106_COLOR_WHITE);
 8000786:	463b      	mov	r3, r7
 8000788:	2201      	movs	r2, #1
 800078a:	492f      	ldr	r1, [pc, #188]	@ (8000848 <main+0x15c>)
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fed1 	bl	8000534 <SH1106_Puts>
	  SH1106_GotoXY(45 + strlen(buffer)*7 + 8, 0);
 8000792:	463b      	mov	r3, r7
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fcd9 	bl	800014c <strlen>
 800079a:	4603      	mov	r3, r0
 800079c:	b29b      	uxth	r3, r3
 800079e:	461a      	mov	r2, r3
 80007a0:	00d2      	lsls	r2, r2, #3
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	3335      	adds	r3, #53	@ 0x35
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fe2d 	bl	800040c <SH1106_GotoXY>
	  SH1106_Puts("RPM", &Font_7x10, SH1106_COLOR_WHITE);
 80007b2:	2201      	movs	r2, #1
 80007b4:	4924      	ldr	r1, [pc, #144]	@ (8000848 <main+0x15c>)
 80007b6:	4826      	ldr	r0, [pc, #152]	@ (8000850 <main+0x164>)
 80007b8:	f7ff febc 	bl	8000534 <SH1106_Puts>
	  SH1106_GotoXY(2,20);
 80007bc:	2114      	movs	r1, #20
 80007be:	2002      	movs	r0, #2
 80007c0:	f7ff fe24 	bl	800040c <SH1106_GotoXY>
	  SH1106_Puts("Mode: ", &Font_7x10, SH1106_COLOR_WHITE);
 80007c4:	2201      	movs	r2, #1
 80007c6:	4920      	ldr	r1, [pc, #128]	@ (8000848 <main+0x15c>)
 80007c8:	4822      	ldr	r0, [pc, #136]	@ (8000854 <main+0x168>)
 80007ca:	f7ff feb3 	bl	8000534 <SH1106_Puts>
	  SH1106_GotoXY(43,20);
 80007ce:	2114      	movs	r1, #20
 80007d0:	202b      	movs	r0, #43	@ 0x2b
 80007d2:	f7ff fe1b 	bl	800040c <SH1106_GotoXY>
	  if(mode == 0)
 80007d6:	4b20      	ldr	r3, [pc, #128]	@ (8000858 <main+0x16c>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d105      	bne.n	80007ea <main+0xfe>
	  {
		  SH1106_Puts("Stop", &Font_7x10, SH1106_COLOR_WHITE);
 80007de:	2201      	movs	r2, #1
 80007e0:	4919      	ldr	r1, [pc, #100]	@ (8000848 <main+0x15c>)
 80007e2:	481e      	ldr	r0, [pc, #120]	@ (800085c <main+0x170>)
 80007e4:	f7ff fea6 	bl	8000534 <SH1106_Puts>
 80007e8:	e004      	b.n	80007f4 <main+0x108>
	  }
	  else
	  {
		  SH1106_Puts("Run", &Font_7x10, SH1106_COLOR_WHITE);
 80007ea:	2201      	movs	r2, #1
 80007ec:	4916      	ldr	r1, [pc, #88]	@ (8000848 <main+0x15c>)
 80007ee:	481c      	ldr	r0, [pc, #112]	@ (8000860 <main+0x174>)
 80007f0:	f7ff fea0 	bl	8000534 <SH1106_Puts>
	  }
	  SH1106_GotoXY(2,40);
 80007f4:	2128      	movs	r1, #40	@ 0x28
 80007f6:	2002      	movs	r0, #2
 80007f8:	f7ff fe08 	bl	800040c <SH1106_GotoXY>
	  SH1106_Puts("Direction: ", &Font_7x10, SH1106_COLOR_WHITE);
 80007fc:	2201      	movs	r2, #1
 80007fe:	4912      	ldr	r1, [pc, #72]	@ (8000848 <main+0x15c>)
 8000800:	4818      	ldr	r0, [pc, #96]	@ (8000864 <main+0x178>)
 8000802:	f7ff fe97 	bl	8000534 <SH1106_Puts>
	  SH1106_GotoXY(73,40);
 8000806:	2128      	movs	r1, #40	@ 0x28
 8000808:	2049      	movs	r0, #73	@ 0x49
 800080a:	f7ff fdff 	bl	800040c <SH1106_GotoXY>
	  if(direction == 0)
 800080e:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <main+0x17c>)
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d105      	bne.n	8000822 <main+0x136>
	  {
		  SH1106_Puts("Forward", &Font_7x10, SH1106_COLOR_WHITE);
 8000816:	2201      	movs	r2, #1
 8000818:	490b      	ldr	r1, [pc, #44]	@ (8000848 <main+0x15c>)
 800081a:	4814      	ldr	r0, [pc, #80]	@ (800086c <main+0x180>)
 800081c:	f7ff fe8a 	bl	8000534 <SH1106_Puts>
 8000820:	e004      	b.n	800082c <main+0x140>
	  }
	  else
	  {
		  SH1106_Puts("Backward", &Font_7x10, SH1106_COLOR_WHITE);
 8000822:	2201      	movs	r2, #1
 8000824:	4908      	ldr	r1, [pc, #32]	@ (8000848 <main+0x15c>)
 8000826:	4812      	ldr	r0, [pc, #72]	@ (8000870 <main+0x184>)
 8000828:	f7ff fe84 	bl	8000534 <SH1106_Puts>
	  }
	  SH1106_UpdateScreen();
 800082c:	f7ff fd3a 	bl	80002a4 <SH1106_UpdateScreen>
	  HAL_Delay(1000);
 8000830:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000834:	f000 fb1c 	bl	8000e70 <HAL_Delay>
  {
 8000838:	e78f      	b.n	800075a <main+0x6e>
 800083a:	bf00      	nop
 800083c:	200004a8 	.word	0x200004a8
 8000840:	20000548 	.word	0x20000548
 8000844:	08003c1c 	.word	0x08003c1c
 8000848:	20000000 	.word	0x20000000
 800084c:	08003c20 	.word	0x08003c20
 8000850:	08003c28 	.word	0x08003c28
 8000854:	08003c2c 	.word	0x08003c2c
 8000858:	2000054a 	.word	0x2000054a
 800085c:	08003c34 	.word	0x08003c34
 8000860:	08003c3c 	.word	0x08003c3c
 8000864:	08003c40 	.word	0x08003c40
 8000868:	2000054c 	.word	0x2000054c
 800086c:	08003c4c 	.word	0x08003c4c
 8000870:	08003c54 	.word	0x08003c54

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b090      	sub	sp, #64	@ 0x40
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0318 	add.w	r3, r7, #24
 800087e:	2228      	movs	r2, #40	@ 0x28
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f002 fd2e 	bl	80032e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000896:	2301      	movs	r3, #1
 8000898:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800089a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800089e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a4:	2301      	movs	r3, #1
 80008a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a8:	2302      	movs	r3, #2
 80008aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008b2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80008b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 0318 	add.w	r3, r7, #24
 80008bc:	4618      	mov	r0, r3
 80008be:	f002 f8e1 	bl	8002a84 <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80008c8:	f000 f8d6 	bl	8000a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008cc:	230f      	movs	r3, #15
 80008ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d0:	2302      	movs	r3, #2
 80008d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2102      	movs	r1, #2
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 fb4e 	bl	8002f88 <HAL_RCC_ClockConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008f2:	f000 f8c1 	bl	8000a78 <Error_Handler>
  }
}
 80008f6:	bf00      	nop
 80008f8:	3740      	adds	r7, #64	@ 0x40
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000904:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <MX_CAN_Init+0x64>)
 8000906:	4a18      	ldr	r2, [pc, #96]	@ (8000968 <MX_CAN_Init+0x68>)
 8000908:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800090a:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <MX_CAN_Init+0x64>)
 800090c:	2204      	movs	r2, #4
 800090e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000910:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <MX_CAN_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000916:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <MX_CAN_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 800091c:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <MX_CAN_Init+0x64>)
 800091e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000922:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000924:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <MX_CAN_Init+0x64>)
 8000926:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800092a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800092c:	4b0d      	ldr	r3, [pc, #52]	@ (8000964 <MX_CAN_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000932:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <MX_CAN_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000938:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <MX_CAN_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <MX_CAN_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000944:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <MX_CAN_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <MX_CAN_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	@ (8000964 <MX_CAN_Init+0x64>)
 8000952:	f000 fab1 	bl	8000eb8 <HAL_CAN_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800095c:	f000 f88c 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200004a8 	.word	0x200004a8
 8000968:	40006400 	.word	0x40006400

0800096c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000970:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <MX_I2C1_Init+0x50>)
 8000972:	4a13      	ldr	r2, [pc, #76]	@ (80009c0 <MX_I2C1_Init+0x54>)
 8000974:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000976:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <MX_I2C1_Init+0x50>)
 8000978:	4a12      	ldr	r2, [pc, #72]	@ (80009c4 <MX_I2C1_Init+0x58>)
 800097a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800097c:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <MX_I2C1_Init+0x50>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000982:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <MX_I2C1_Init+0x50>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000988:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <MX_I2C1_Init+0x50>)
 800098a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800098e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000990:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <MX_I2C1_Init+0x50>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000996:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <MX_I2C1_Init+0x50>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099c:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <MX_I2C1_Init+0x50>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <MX_I2C1_Init+0x50>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	@ (80009bc <MX_I2C1_Init+0x50>)
 80009aa:	f001 faa1 	bl	8001ef0 <HAL_I2C_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009b4:	f000 f860 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200004d0 	.word	0x200004d0
 80009c0:	40005400 	.word	0x40005400
 80009c4:	00061a80 	.word	0x00061a80

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009dc:	4b24      	ldr	r3, [pc, #144]	@ (8000a70 <MX_GPIO_Init+0xa8>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a23      	ldr	r2, [pc, #140]	@ (8000a70 <MX_GPIO_Init+0xa8>)
 80009e2:	f043 0310 	orr.w	r3, r3, #16
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b21      	ldr	r3, [pc, #132]	@ (8000a70 <MX_GPIO_Init+0xa8>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0310 	and.w	r3, r3, #16
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a70 <MX_GPIO_Init+0xa8>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a70 <MX_GPIO_Init+0xa8>)
 80009fa:	f043 0320 	orr.w	r3, r3, #32
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <MX_GPIO_Init+0xa8>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0320 	and.w	r3, r3, #32
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <MX_GPIO_Init+0xa8>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a17      	ldr	r2, [pc, #92]	@ (8000a70 <MX_GPIO_Init+0xa8>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <MX_GPIO_Init+0xa8>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <MX_GPIO_Init+0xa8>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a11      	ldr	r2, [pc, #68]	@ (8000a70 <MX_GPIO_Init+0xa8>)
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <MX_GPIO_Init+0xa8>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0308 	and.w	r3, r3, #8
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a42:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <MX_GPIO_Init+0xac>)
 8000a44:	f001 fa3c 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5a:	f107 0310 	add.w	r3, r7, #16
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4804      	ldr	r0, [pc, #16]	@ (8000a74 <MX_GPIO_Init+0xac>)
 8000a62:	f001 f8a9 	bl	8001bb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40011000 	.word	0x40011000

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <Error_Handler+0x8>

08000a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <HAL_MspInit+0x5c>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	4a14      	ldr	r2, [pc, #80]	@ (8000ae0 <HAL_MspInit+0x5c>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6193      	str	r3, [r2, #24]
 8000a96:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <HAL_MspInit+0x5c>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <HAL_MspInit+0x5c>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae0 <HAL_MspInit+0x5c>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aac:	61d3      	str	r3, [r2, #28]
 8000aae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <HAL_MspInit+0x5c>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000aba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <HAL_MspInit+0x60>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	4a04      	ldr	r2, [pc, #16]	@ (8000ae4 <HAL_MspInit+0x60>)
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40010000 	.word	0x40010000

08000ae8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	@ 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a31      	ldr	r2, [pc, #196]	@ (8000bc8 <HAL_CAN_MspInit+0xe0>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d15b      	bne.n	8000bc0 <HAL_CAN_MspInit+0xd8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b08:	4b30      	ldr	r3, [pc, #192]	@ (8000bcc <HAL_CAN_MspInit+0xe4>)
 8000b0a:	69db      	ldr	r3, [r3, #28]
 8000b0c:	4a2f      	ldr	r2, [pc, #188]	@ (8000bcc <HAL_CAN_MspInit+0xe4>)
 8000b0e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b12:	61d3      	str	r3, [r2, #28]
 8000b14:	4b2d      	ldr	r3, [pc, #180]	@ (8000bcc <HAL_CAN_MspInit+0xe4>)
 8000b16:	69db      	ldr	r3, [r3, #28]
 8000b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b20:	4b2a      	ldr	r3, [pc, #168]	@ (8000bcc <HAL_CAN_MspInit+0xe4>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a29      	ldr	r2, [pc, #164]	@ (8000bcc <HAL_CAN_MspInit+0xe4>)
 8000b26:	f043 0308 	orr.w	r3, r3, #8
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b27      	ldr	r3, [pc, #156]	@ (8000bcc <HAL_CAN_MspInit+0xe4>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f003 0308 	and.w	r3, r3, #8
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4820      	ldr	r0, [pc, #128]	@ (8000bd0 <HAL_CAN_MspInit+0xe8>)
 8000b4e:	f001 f833 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	481a      	ldr	r0, [pc, #104]	@ (8000bd0 <HAL_CAN_MspInit+0xe8>)
 8000b68:	f001 f826 	bl	8001bb8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000b6c:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <HAL_CAN_MspInit+0xec>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b74:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b8a:	4a12      	ldr	r2, [pc, #72]	@ (8000bd4 <HAL_CAN_MspInit+0xec>)
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	2013      	movs	r0, #19
 8000b96:	f000 ffd8 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000b9a:	2013      	movs	r0, #19
 8000b9c:	f000 fff1 	bl	8001b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2014      	movs	r0, #20
 8000ba6:	f000 ffd0 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000baa:	2014      	movs	r0, #20
 8000bac:	f000 ffe9 	bl	8001b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2015      	movs	r0, #21
 8000bb6:	f000 ffc8 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000bba:	2015      	movs	r0, #21
 8000bbc:	f000 ffe1 	bl	8001b82 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000bc0:	bf00      	nop
 8000bc2:	3728      	adds	r7, #40	@ 0x28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40006400 	.word	0x40006400
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010c00 	.word	0x40010c00
 8000bd4:	40010000 	.word	0x40010000

08000bd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a15      	ldr	r2, [pc, #84]	@ (8000c48 <HAL_I2C_MspInit+0x70>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d123      	bne.n	8000c40 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf8:	4b14      	ldr	r3, [pc, #80]	@ (8000c4c <HAL_I2C_MspInit+0x74>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a13      	ldr	r2, [pc, #76]	@ (8000c4c <HAL_I2C_MspInit+0x74>)
 8000bfe:	f043 0308 	orr.w	r3, r3, #8
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <HAL_I2C_MspInit+0x74>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f003 0308 	and.w	r3, r3, #8
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c10:	23c0      	movs	r3, #192	@ 0xc0
 8000c12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c14:	2312      	movs	r3, #18
 8000c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	4619      	mov	r1, r3
 8000c22:	480b      	ldr	r0, [pc, #44]	@ (8000c50 <HAL_I2C_MspInit+0x78>)
 8000c24:	f000 ffc8 	bl	8001bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c28:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <HAL_I2C_MspInit+0x74>)
 8000c2a:	69db      	ldr	r3, [r3, #28]
 8000c2c:	4a07      	ldr	r2, [pc, #28]	@ (8000c4c <HAL_I2C_MspInit+0x74>)
 8000c2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c32:	61d3      	str	r3, [r2, #28]
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <HAL_I2C_MspInit+0x74>)
 8000c36:	69db      	ldr	r3, [r3, #28]
 8000c38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c40:	bf00      	nop
 8000c42:	3720      	adds	r7, #32
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40005400 	.word	0x40005400
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40010c00 	.word	0x40010c00

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <NMI_Handler+0x4>

08000c5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <BusFault_Handler+0x4>

08000c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <UsageFault_Handler+0x4>

08000c7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca4:	f000 f8c8 	bl	8000e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000cb0:	4802      	ldr	r0, [pc, #8]	@ (8000cbc <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000cb2:	f000 fc4f 	bl	8001554 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200004a8 	.word	0x200004a8

08000cc0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000cc4:	4802      	ldr	r0, [pc, #8]	@ (8000cd0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000cc6:	f000 fc45 	bl	8001554 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200004a8 	.word	0x200004a8

08000cd4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000cd8:	4802      	ldr	r0, [pc, #8]	@ (8000ce4 <CAN1_RX1_IRQHandler+0x10>)
 8000cda:	f000 fc3b 	bl	8001554 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200004a8 	.word	0x200004a8

08000ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf0:	4a14      	ldr	r2, [pc, #80]	@ (8000d44 <_sbrk+0x5c>)
 8000cf2:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <_sbrk+0x60>)
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cfc:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d04:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <_sbrk+0x64>)
 8000d06:	4a12      	ldr	r2, [pc, #72]	@ (8000d50 <_sbrk+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0a:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d207      	bcs.n	8000d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d18:	f002 faec 	bl	80032f4 <__errno>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	220c      	movs	r2, #12
 8000d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	e009      	b.n	8000d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2e:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	4a05      	ldr	r2, [pc, #20]	@ (8000d4c <_sbrk+0x64>)
 8000d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20005000 	.word	0x20005000
 8000d48:	00000400 	.word	0x00000400
 8000d4c:	20000550 	.word	0x20000550
 8000d50:	200006a0 	.word	0x200006a0

08000d54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d60:	f7ff fff8 	bl	8000d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d64:	480b      	ldr	r0, [pc, #44]	@ (8000d94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d66:	490c      	ldr	r1, [pc, #48]	@ (8000d98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d68:	4a0c      	ldr	r2, [pc, #48]	@ (8000d9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d6c:	e002      	b.n	8000d74 <LoopCopyDataInit>

08000d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d72:	3304      	adds	r3, #4

08000d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d78:	d3f9      	bcc.n	8000d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7a:	4a09      	ldr	r2, [pc, #36]	@ (8000da0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d7c:	4c09      	ldr	r4, [pc, #36]	@ (8000da4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d80:	e001      	b.n	8000d86 <LoopFillZerobss>

08000d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d84:	3204      	adds	r2, #4

08000d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d88:	d3fb      	bcc.n	8000d82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f002 fab9 	bl	8003300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d8e:	f7ff fcad 	bl	80006ec <main>
  bx lr
 8000d92:	4770      	bx	lr
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000d9c:	0800443c 	.word	0x0800443c
  ldr r2, =_sbss
 8000da0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000da4:	200006a0 	.word	0x200006a0

08000da8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC1_2_IRQHandler>
	...

08000dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db0:	4b08      	ldr	r3, [pc, #32]	@ (8000dd4 <HAL_Init+0x28>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a07      	ldr	r2, [pc, #28]	@ (8000dd4 <HAL_Init+0x28>)
 8000db6:	f043 0310 	orr.w	r3, r3, #16
 8000dba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f000 feb9 	bl	8001b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc2:	200f      	movs	r0, #15
 8000dc4:	f000 f808 	bl	8000dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc8:	f7ff fe5c 	bl	8000a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40022000 	.word	0x40022000

08000dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de0:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <HAL_InitTick+0x54>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <HAL_InitTick+0x58>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4619      	mov	r1, r3
 8000dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 fed1 	bl	8001b9e <HAL_SYSTICK_Config>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00e      	b.n	8000e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b0f      	cmp	r3, #15
 8000e0a:	d80a      	bhi.n	8000e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f000 fe99 	bl	8001b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e18:	4a06      	ldr	r2, [pc, #24]	@ (8000e34 <HAL_InitTick+0x5c>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e000      	b.n	8000e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000010 	.word	0x20000010
 8000e34:	2000000c 	.word	0x2000000c

08000e38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e3c:	4b05      	ldr	r3, [pc, #20]	@ (8000e54 <HAL_IncTick+0x1c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <HAL_IncTick+0x20>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a03      	ldr	r2, [pc, #12]	@ (8000e58 <HAL_IncTick+0x20>)
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	20000010 	.word	0x20000010
 8000e58:	20000554 	.word	0x20000554

08000e5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b02      	ldr	r3, [pc, #8]	@ (8000e6c <HAL_GetTick+0x10>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	20000554 	.word	0x20000554

08000e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e78:	f7ff fff0 	bl	8000e5c <HAL_GetTick>
 8000e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e88:	d005      	beq.n	8000e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <HAL_Delay+0x44>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4413      	add	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e96:	bf00      	nop
 8000e98:	f7ff ffe0 	bl	8000e5c <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d8f7      	bhi.n	8000e98 <HAL_Delay+0x28>
  {
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000010 	.word	0x20000010

08000eb8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e0ed      	b.n	80010a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d102      	bne.n	8000edc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff fe06 	bl	8000ae8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 0201 	orr.w	r2, r2, #1
 8000eea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eec:	f7ff ffb6 	bl	8000e5c <HAL_GetTick>
 8000ef0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ef2:	e012      	b.n	8000f1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ef4:	f7ff ffb2 	bl	8000e5c <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b0a      	cmp	r3, #10
 8000f00:	d90b      	bls.n	8000f1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f06:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2205      	movs	r2, #5
 8000f12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e0c5      	b.n	80010a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0e5      	beq.n	8000ef4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0202 	bic.w	r2, r2, #2
 8000f36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f38:	f7ff ff90 	bl	8000e5c <HAL_GetTick>
 8000f3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f3e:	e012      	b.n	8000f66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f40:	f7ff ff8c 	bl	8000e5c <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b0a      	cmp	r3, #10
 8000f4c:	d90b      	bls.n	8000f66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f52:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2205      	movs	r2, #5
 8000f5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e09f      	b.n	80010a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1e5      	bne.n	8000f40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	7e1b      	ldrb	r3, [r3, #24]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d108      	bne.n	8000f8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	e007      	b.n	8000f9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	7e5b      	ldrb	r3, [r3, #25]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d108      	bne.n	8000fb8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	e007      	b.n	8000fc8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000fc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7e9b      	ldrb	r3, [r3, #26]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d108      	bne.n	8000fe2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f042 0220 	orr.w	r2, r2, #32
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	e007      	b.n	8000ff2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 0220 	bic.w	r2, r2, #32
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7edb      	ldrb	r3, [r3, #27]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d108      	bne.n	800100c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f022 0210 	bic.w	r2, r2, #16
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	e007      	b.n	800101c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 0210 	orr.w	r2, r2, #16
 800101a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	7f1b      	ldrb	r3, [r3, #28]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d108      	bne.n	8001036 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 0208 	orr.w	r2, r2, #8
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e007      	b.n	8001046 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0208 	bic.w	r2, r2, #8
 8001044:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	7f5b      	ldrb	r3, [r3, #29]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d108      	bne.n	8001060 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f042 0204 	orr.w	r2, r2, #4
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	e007      	b.n	8001070 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 0204 	bic.w	r2, r2, #4
 800106e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	431a      	orrs	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	ea42 0103 	orr.w	r1, r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	1e5a      	subs	r2, r3, #1
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	430a      	orrs	r2, r1
 8001094:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b087      	sub	sp, #28
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80010c6:	7cfb      	ldrb	r3, [r7, #19]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d003      	beq.n	80010d4 <HAL_CAN_ConfigFilter+0x26>
 80010cc:	7cfb      	ldrb	r3, [r7, #19]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	f040 80aa 	bne.w	8001228 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80010da:	f043 0201 	orr.w	r2, r3, #1
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	f003 031f 	and.w	r3, r3, #31
 80010ec:	2201      	movs	r2, #1
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d123      	bne.n	8001156 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	43db      	mvns	r3, r3
 8001118:	401a      	ands	r2, r3
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001130:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	3248      	adds	r2, #72	@ 0x48
 8001136:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800114a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800114c:	6979      	ldr	r1, [r7, #20]
 800114e:	3348      	adds	r3, #72	@ 0x48
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	440b      	add	r3, r1
 8001154:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d122      	bne.n	80011a4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	431a      	orrs	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800117e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	3248      	adds	r2, #72	@ 0x48
 8001184:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001198:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800119a:	6979      	ldr	r1, [r7, #20]
 800119c:	3348      	adds	r3, #72	@ 0x48
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	440b      	add	r3, r1
 80011a2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d109      	bne.n	80011c0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80011be:	e007      	b.n	80011d0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	431a      	orrs	r2, r3
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d109      	bne.n	80011ec <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	401a      	ands	r2, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80011ea:	e007      	b.n	80011fc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	431a      	orrs	r2, r3
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d107      	bne.n	8001214 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	431a      	orrs	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800121a:	f023 0201 	bic.w	r2, r3, #1
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	e006      	b.n	8001236 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
  }
}
 8001236:	4618      	mov	r0, r3
 8001238:	371c      	adds	r7, #28
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b01      	cmp	r3, #1
 8001252:	d12e      	bne.n	80012b2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2202      	movs	r2, #2
 8001258:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0201 	bic.w	r2, r2, #1
 800126a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800126c:	f7ff fdf6 	bl	8000e5c <HAL_GetTick>
 8001270:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001272:	e012      	b.n	800129a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001274:	f7ff fdf2 	bl	8000e5c <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b0a      	cmp	r3, #10
 8001280:	d90b      	bls.n	800129a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001286:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2205      	movs	r2, #5
 8001292:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e012      	b.n	80012c0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1e5      	bne.n	8001274 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e006      	b.n	80012c0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
  }
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012c8:	b480      	push	{r7}
 80012ca:	b087      	sub	sp, #28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012dc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d003      	beq.n	80012ec <HAL_CAN_GetRxMessage+0x24>
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	f040 8103 	bne.w	80014f2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10e      	bne.n	8001310 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d116      	bne.n	800132e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001304:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e0f7      	b.n	8001500 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d107      	bne.n	800132e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001322:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e0e8      	b.n	8001500 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	331b      	adds	r3, #27
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	4413      	add	r3, r2
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0204 	and.w	r2, r3, #4
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10c      	bne.n	8001366 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	331b      	adds	r3, #27
 8001354:	011b      	lsls	r3, r3, #4
 8001356:	4413      	add	r3, r2
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	0d5b      	lsrs	r3, r3, #21
 800135c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	e00b      	b.n	800137e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	331b      	adds	r3, #27
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	4413      	add	r3, r2
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	08db      	lsrs	r3, r3, #3
 8001376:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	331b      	adds	r3, #27
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	4413      	add	r3, r2
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0202 	and.w	r2, r3, #2
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	331b      	adds	r3, #27
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	4413      	add	r3, r2
 80013a0:	3304      	adds	r3, #4
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2208      	movs	r2, #8
 80013b0:	611a      	str	r2, [r3, #16]
 80013b2:	e00b      	b.n	80013cc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	331b      	adds	r3, #27
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	4413      	add	r3, r2
 80013c0:	3304      	adds	r3, #4
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 020f 	and.w	r2, r3, #15
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	331b      	adds	r3, #27
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	4413      	add	r3, r2
 80013d8:	3304      	adds	r3, #4
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	331b      	adds	r3, #27
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	4413      	add	r3, r2
 80013f0:	3304      	adds	r3, #4
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	0c1b      	lsrs	r3, r3, #16
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	4413      	add	r3, r2
 8001406:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	4413      	add	r3, r2
 800141c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	0a1a      	lsrs	r2, r3, #8
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	3301      	adds	r3, #1
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	4413      	add	r3, r2
 8001436:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	0c1a      	lsrs	r2, r3, #16
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	3302      	adds	r3, #2
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	4413      	add	r3, r2
 8001450:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	0e1a      	lsrs	r2, r3, #24
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	3303      	adds	r3, #3
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	4413      	add	r3, r2
 800146a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	3304      	adds	r3, #4
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	011b      	lsls	r3, r3, #4
 8001480:	4413      	add	r3, r2
 8001482:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	0a1a      	lsrs	r2, r3, #8
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	3305      	adds	r3, #5
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	4413      	add	r3, r2
 800149c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	0c1a      	lsrs	r2, r3, #16
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	3306      	adds	r3, #6
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	011b      	lsls	r3, r3, #4
 80014b4:	4413      	add	r3, r2
 80014b6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	0e1a      	lsrs	r2, r3, #24
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	3307      	adds	r3, #7
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d108      	bne.n	80014de <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0220 	orr.w	r2, r2, #32
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	e007      	b.n	80014ee <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	691a      	ldr	r2, [r3, #16]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f042 0220 	orr.w	r2, r2, #32
 80014ec:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e006      	b.n	8001500 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
  }
}
 8001500:	4618      	mov	r0, r3
 8001502:	371c      	adds	r7, #28
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800150a:	b480      	push	{r7}
 800150c:	b085      	sub	sp, #20
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 3020 	ldrb.w	r3, [r3, #32]
 800151a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d002      	beq.n	8001528 <HAL_CAN_ActivateNotification+0x1e>
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d109      	bne.n	800153c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6959      	ldr	r1, [r3, #20]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	e006      	b.n	800154a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001540:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
  }
}
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	@ 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d07c      	beq.n	8001694 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d023      	beq.n	80015ec <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2201      	movs	r2, #1
 80015aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f983 	bl	80018c2 <HAL_CAN_TxMailbox0CompleteCallback>
 80015bc:	e016      	b.n	80015ec <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d004      	beq.n	80015d2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80015c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80015d0:	e00c      	b.n	80015ec <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d004      	beq.n	80015e6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80015dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80015e4:	e002      	b.n	80015ec <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f986 	bl	80018f8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d024      	beq.n	8001640 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f962 	bl	80018d4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001610:	e016      	b.n	8001640 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001618:	2b00      	cmp	r3, #0
 800161a:	d004      	beq.n	8001626 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800161c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001622:	627b      	str	r3, [r7, #36]	@ 0x24
 8001624:	e00c      	b.n	8001640 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800162c:	2b00      	cmp	r3, #0
 800162e:	d004      	beq.n	800163a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001632:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
 8001638:	e002      	b.n	8001640 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f965 	bl	800190a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d024      	beq.n	8001694 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001652:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f941 	bl	80018e6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001664:	e016      	b.n	8001694 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d004      	beq.n	800167a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
 8001678:	e00c      	b.n	8001694 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d004      	beq.n	800168e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
 800168c:	e002      	b.n	8001694 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f944 	bl	800191c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00c      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f003 0310 	and.w	r3, r3, #16
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d007      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80016a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ae:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2210      	movs	r2, #16
 80016b6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00b      	beq.n	80016da <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d006      	beq.n	80016da <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2208      	movs	r2, #8
 80016d2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f92a 	bl	800192e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d009      	beq.n	80016f8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7fe ffd0 	bl	8000698 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00c      	beq.n	800171c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	f003 0310 	and.w	r3, r3, #16
 8001708:	2b00      	cmp	r3, #0
 800170a:	d007      	beq.n	800171c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800170c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001712:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2210      	movs	r2, #16
 800171a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	f003 0320 	and.w	r3, r3, #32
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00b      	beq.n	800173e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2208      	movs	r2, #8
 8001736:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f90a 	bl	8001952 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	f003 0310 	and.w	r3, r3, #16
 8001744:	2b00      	cmp	r3, #0
 8001746:	d009      	beq.n	800175c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d002      	beq.n	800175c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f8f2 	bl	8001940 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	f003 0310 	and.w	r3, r3, #16
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2210      	movs	r2, #16
 8001776:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f8f3 	bl	8001964 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00b      	beq.n	80017a0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d006      	beq.n	80017a0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2208      	movs	r2, #8
 8001798:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f8eb 	bl	8001976 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d07b      	beq.n	80018a2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d072      	beq.n	800189a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d008      	beq.n	80017d0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80017c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d008      	beq.n	80017ec <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80017e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d008      	beq.n	8001808 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001802:	f043 0304 	orr.w	r3, r3, #4
 8001806:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800180e:	2b00      	cmp	r3, #0
 8001810:	d043      	beq.n	800189a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001818:	2b00      	cmp	r3, #0
 800181a:	d03e      	beq.n	800189a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001822:	2b60      	cmp	r3, #96	@ 0x60
 8001824:	d02b      	beq.n	800187e <HAL_CAN_IRQHandler+0x32a>
 8001826:	2b60      	cmp	r3, #96	@ 0x60
 8001828:	d82e      	bhi.n	8001888 <HAL_CAN_IRQHandler+0x334>
 800182a:	2b50      	cmp	r3, #80	@ 0x50
 800182c:	d022      	beq.n	8001874 <HAL_CAN_IRQHandler+0x320>
 800182e:	2b50      	cmp	r3, #80	@ 0x50
 8001830:	d82a      	bhi.n	8001888 <HAL_CAN_IRQHandler+0x334>
 8001832:	2b40      	cmp	r3, #64	@ 0x40
 8001834:	d019      	beq.n	800186a <HAL_CAN_IRQHandler+0x316>
 8001836:	2b40      	cmp	r3, #64	@ 0x40
 8001838:	d826      	bhi.n	8001888 <HAL_CAN_IRQHandler+0x334>
 800183a:	2b30      	cmp	r3, #48	@ 0x30
 800183c:	d010      	beq.n	8001860 <HAL_CAN_IRQHandler+0x30c>
 800183e:	2b30      	cmp	r3, #48	@ 0x30
 8001840:	d822      	bhi.n	8001888 <HAL_CAN_IRQHandler+0x334>
 8001842:	2b10      	cmp	r3, #16
 8001844:	d002      	beq.n	800184c <HAL_CAN_IRQHandler+0x2f8>
 8001846:	2b20      	cmp	r3, #32
 8001848:	d005      	beq.n	8001856 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800184a:	e01d      	b.n	8001888 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	f043 0308 	orr.w	r3, r3, #8
 8001852:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001854:	e019      	b.n	800188a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001858:	f043 0310 	orr.w	r3, r3, #16
 800185c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800185e:	e014      	b.n	800188a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001862:	f043 0320 	orr.w	r3, r3, #32
 8001866:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001868:	e00f      	b.n	800188a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800186a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001872:	e00a      	b.n	800188a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800187c:	e005      	b.n	800188a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800187e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001884:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001886:	e000      	b.n	800188a <HAL_CAN_IRQHandler+0x336>
            break;
 8001888:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	699a      	ldr	r2, [r3, #24]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001898:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2204      	movs	r2, #4
 80018a0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80018a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d008      	beq.n	80018ba <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f867 	bl	8001988 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80018ba:	bf00      	nop
 80018bc:	3728      	adds	r7, #40	@ 0x28
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr

0800192e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr

08001952 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
	...

0800199c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019ac:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019b8:	4013      	ands	r3, r2
 80019ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ce:	4a04      	ldr	r2, [pc, #16]	@ (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	60d3      	str	r3, [r2, #12]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e8:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <__NVIC_GetPriorityGrouping+0x18>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	0a1b      	lsrs	r3, r3, #8
 80019ee:	f003 0307 	and.w	r3, r3, #7
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	db0b      	blt.n	8001a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	f003 021f 	and.w	r2, r3, #31
 8001a18:	4906      	ldr	r1, [pc, #24]	@ (8001a34 <__NVIC_EnableIRQ+0x34>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	2001      	movs	r0, #1
 8001a22:	fa00 f202 	lsl.w	r2, r0, r2
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	e000e100 	.word	0xe000e100

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0a      	blt.n	8001a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	490c      	ldr	r1, [pc, #48]	@ (8001a84 <__NVIC_SetPriority+0x4c>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a60:	e00a      	b.n	8001a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4908      	ldr	r1, [pc, #32]	@ (8001a88 <__NVIC_SetPriority+0x50>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	761a      	strb	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	@ 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_EncodePriority+0x30>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_EncodePriority+0x32>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	4313      	orrs	r3, r2
         );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	@ 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b00:	d301      	bcc.n	8001b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00f      	b.n	8001b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b06:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <SysTick_Config+0x40>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0e:	210f      	movs	r1, #15
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f7ff ff90 	bl	8001a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b18:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <SysTick_Config+0x40>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1e:	4b04      	ldr	r3, [pc, #16]	@ (8001b30 <SysTick_Config+0x40>)
 8001b20:	2207      	movs	r2, #7
 8001b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	e000e010 	.word	0xe000e010

08001b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ff2d 	bl	800199c <__NVIC_SetPriorityGrouping>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	4603      	mov	r3, r0
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b5c:	f7ff ff42 	bl	80019e4 <__NVIC_GetPriorityGrouping>
 8001b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	6978      	ldr	r0, [r7, #20]
 8001b68:	f7ff ff90 	bl	8001a8c <NVIC_EncodePriority>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff5f 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b7a:	bf00      	nop
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff35 	bl	8001a00 <__NVIC_EnableIRQ>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ffa2 	bl	8001af0 <SysTick_Config>
 8001bac:	4603      	mov	r3, r0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b08b      	sub	sp, #44	@ 0x2c
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bca:	e169      	b.n	8001ea0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	f040 8158 	bne.w	8001e9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4a9a      	ldr	r2, [pc, #616]	@ (8001e58 <HAL_GPIO_Init+0x2a0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d05e      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
 8001bf4:	4a98      	ldr	r2, [pc, #608]	@ (8001e58 <HAL_GPIO_Init+0x2a0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d875      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001bfa:	4a98      	ldr	r2, [pc, #608]	@ (8001e5c <HAL_GPIO_Init+0x2a4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d058      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
 8001c00:	4a96      	ldr	r2, [pc, #600]	@ (8001e5c <HAL_GPIO_Init+0x2a4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d86f      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001c06:	4a96      	ldr	r2, [pc, #600]	@ (8001e60 <HAL_GPIO_Init+0x2a8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d052      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
 8001c0c:	4a94      	ldr	r2, [pc, #592]	@ (8001e60 <HAL_GPIO_Init+0x2a8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d869      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001c12:	4a94      	ldr	r2, [pc, #592]	@ (8001e64 <HAL_GPIO_Init+0x2ac>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d04c      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
 8001c18:	4a92      	ldr	r2, [pc, #584]	@ (8001e64 <HAL_GPIO_Init+0x2ac>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d863      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001c1e:	4a92      	ldr	r2, [pc, #584]	@ (8001e68 <HAL_GPIO_Init+0x2b0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d046      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
 8001c24:	4a90      	ldr	r2, [pc, #576]	@ (8001e68 <HAL_GPIO_Init+0x2b0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d85d      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001c2a:	2b12      	cmp	r3, #18
 8001c2c:	d82a      	bhi.n	8001c84 <HAL_GPIO_Init+0xcc>
 8001c2e:	2b12      	cmp	r3, #18
 8001c30:	d859      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001c32:	a201      	add	r2, pc, #4	@ (adr r2, 8001c38 <HAL_GPIO_Init+0x80>)
 8001c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c38:	08001cb3 	.word	0x08001cb3
 8001c3c:	08001c8d 	.word	0x08001c8d
 8001c40:	08001c9f 	.word	0x08001c9f
 8001c44:	08001ce1 	.word	0x08001ce1
 8001c48:	08001ce7 	.word	0x08001ce7
 8001c4c:	08001ce7 	.word	0x08001ce7
 8001c50:	08001ce7 	.word	0x08001ce7
 8001c54:	08001ce7 	.word	0x08001ce7
 8001c58:	08001ce7 	.word	0x08001ce7
 8001c5c:	08001ce7 	.word	0x08001ce7
 8001c60:	08001ce7 	.word	0x08001ce7
 8001c64:	08001ce7 	.word	0x08001ce7
 8001c68:	08001ce7 	.word	0x08001ce7
 8001c6c:	08001ce7 	.word	0x08001ce7
 8001c70:	08001ce7 	.word	0x08001ce7
 8001c74:	08001ce7 	.word	0x08001ce7
 8001c78:	08001ce7 	.word	0x08001ce7
 8001c7c:	08001c95 	.word	0x08001c95
 8001c80:	08001ca9 	.word	0x08001ca9
 8001c84:	4a79      	ldr	r2, [pc, #484]	@ (8001e6c <HAL_GPIO_Init+0x2b4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d013      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c8a:	e02c      	b.n	8001ce6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	623b      	str	r3, [r7, #32]
          break;
 8001c92:	e029      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	623b      	str	r3, [r7, #32]
          break;
 8001c9c:	e024      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	3308      	adds	r3, #8
 8001ca4:	623b      	str	r3, [r7, #32]
          break;
 8001ca6:	e01f      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	330c      	adds	r3, #12
 8001cae:	623b      	str	r3, [r7, #32]
          break;
 8001cb0:	e01a      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d102      	bne.n	8001cc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cba:	2304      	movs	r3, #4
 8001cbc:	623b      	str	r3, [r7, #32]
          break;
 8001cbe:	e013      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d105      	bne.n	8001cd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cc8:	2308      	movs	r3, #8
 8001cca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	611a      	str	r2, [r3, #16]
          break;
 8001cd2:	e009      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cd4:	2308      	movs	r3, #8
 8001cd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	615a      	str	r2, [r3, #20]
          break;
 8001cde:	e003      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	623b      	str	r3, [r7, #32]
          break;
 8001ce4:	e000      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          break;
 8001ce6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2bff      	cmp	r3, #255	@ 0xff
 8001cec:	d801      	bhi.n	8001cf2 <HAL_GPIO_Init+0x13a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	e001      	b.n	8001cf6 <HAL_GPIO_Init+0x13e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2bff      	cmp	r3, #255	@ 0xff
 8001cfc:	d802      	bhi.n	8001d04 <HAL_GPIO_Init+0x14c>
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	e002      	b.n	8001d0a <HAL_GPIO_Init+0x152>
 8001d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d06:	3b08      	subs	r3, #8
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	210f      	movs	r1, #15
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	6a39      	ldr	r1, [r7, #32]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	fa01 f303 	lsl.w	r3, r1, r3
 8001d24:	431a      	orrs	r2, r3
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 80b1 	beq.w	8001e9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d38:	4b4d      	ldr	r3, [pc, #308]	@ (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	4a4c      	ldr	r2, [pc, #304]	@ (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6193      	str	r3, [r2, #24]
 8001d44:	4b4a      	ldr	r3, [pc, #296]	@ (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d50:	4a48      	ldr	r2, [pc, #288]	@ (8001e74 <HAL_GPIO_Init+0x2bc>)
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	3302      	adds	r3, #2
 8001d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	220f      	movs	r2, #15
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	4013      	ands	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a40      	ldr	r2, [pc, #256]	@ (8001e78 <HAL_GPIO_Init+0x2c0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d013      	beq.n	8001da4 <HAL_GPIO_Init+0x1ec>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a3f      	ldr	r2, [pc, #252]	@ (8001e7c <HAL_GPIO_Init+0x2c4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d00d      	beq.n	8001da0 <HAL_GPIO_Init+0x1e8>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a3e      	ldr	r2, [pc, #248]	@ (8001e80 <HAL_GPIO_Init+0x2c8>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d007      	beq.n	8001d9c <HAL_GPIO_Init+0x1e4>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a3d      	ldr	r2, [pc, #244]	@ (8001e84 <HAL_GPIO_Init+0x2cc>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d101      	bne.n	8001d98 <HAL_GPIO_Init+0x1e0>
 8001d94:	2303      	movs	r3, #3
 8001d96:	e006      	b.n	8001da6 <HAL_GPIO_Init+0x1ee>
 8001d98:	2304      	movs	r3, #4
 8001d9a:	e004      	b.n	8001da6 <HAL_GPIO_Init+0x1ee>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e002      	b.n	8001da6 <HAL_GPIO_Init+0x1ee>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <HAL_GPIO_Init+0x1ee>
 8001da4:	2300      	movs	r3, #0
 8001da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001da8:	f002 0203 	and.w	r2, r2, #3
 8001dac:	0092      	lsls	r2, r2, #2
 8001dae:	4093      	lsls	r3, r2
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001db6:	492f      	ldr	r1, [pc, #188]	@ (8001e74 <HAL_GPIO_Init+0x2bc>)
 8001db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d006      	beq.n	8001dde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	492c      	ldr	r1, [pc, #176]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	608b      	str	r3, [r1, #8]
 8001ddc:	e006      	b.n	8001dec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dde:	4b2a      	ldr	r3, [pc, #168]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	4928      	ldr	r1, [pc, #160]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d006      	beq.n	8001e06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001df8:	4b23      	ldr	r3, [pc, #140]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	4922      	ldr	r1, [pc, #136]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	60cb      	str	r3, [r1, #12]
 8001e04:	e006      	b.n	8001e14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e06:	4b20      	ldr	r3, [pc, #128]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	491e      	ldr	r1, [pc, #120]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d006      	beq.n	8001e2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e20:	4b19      	ldr	r3, [pc, #100]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	4918      	ldr	r1, [pc, #96]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]
 8001e2c:	e006      	b.n	8001e3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e2e:	4b16      	ldr	r3, [pc, #88]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	4914      	ldr	r1, [pc, #80]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d021      	beq.n	8001e8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e48:	4b0f      	ldr	r3, [pc, #60]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	490e      	ldr	r1, [pc, #56]	@ (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]
 8001e54:	e021      	b.n	8001e9a <HAL_GPIO_Init+0x2e2>
 8001e56:	bf00      	nop
 8001e58:	10320000 	.word	0x10320000
 8001e5c:	10310000 	.word	0x10310000
 8001e60:	10220000 	.word	0x10220000
 8001e64:	10210000 	.word	0x10210000
 8001e68:	10120000 	.word	0x10120000
 8001e6c:	10110000 	.word	0x10110000
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40010000 	.word	0x40010000
 8001e78:	40010800 	.word	0x40010800
 8001e7c:	40010c00 	.word	0x40010c00
 8001e80:	40011000 	.word	0x40011000
 8001e84:	40011400 	.word	0x40011400
 8001e88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <HAL_GPIO_Init+0x304>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	4909      	ldr	r1, [pc, #36]	@ (8001ebc <HAL_GPIO_Init+0x304>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f47f ae8e 	bne.w	8001bcc <HAL_GPIO_Init+0x14>
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	372c      	adds	r7, #44	@ 0x2c
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	40010400 	.word	0x40010400

08001ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ed0:	787b      	ldrb	r3, [r7, #1]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ed6:	887a      	ldrh	r2, [r7, #2]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001edc:	e003      	b.n	8001ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ede:	887b      	ldrh	r3, [r7, #2]
 8001ee0:	041a      	lsls	r2, r3, #16
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	611a      	str	r2, [r3, #16]
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e12b      	b.n	800215a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d106      	bne.n	8001f1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe fe5e 	bl	8000bd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2224      	movs	r2, #36	@ 0x24
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0201 	bic.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f54:	f001 f960 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 8001f58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	4a81      	ldr	r2, [pc, #516]	@ (8002164 <HAL_I2C_Init+0x274>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d807      	bhi.n	8001f74 <HAL_I2C_Init+0x84>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4a80      	ldr	r2, [pc, #512]	@ (8002168 <HAL_I2C_Init+0x278>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	bf94      	ite	ls
 8001f6c:	2301      	movls	r3, #1
 8001f6e:	2300      	movhi	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	e006      	b.n	8001f82 <HAL_I2C_Init+0x92>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4a7d      	ldr	r2, [pc, #500]	@ (800216c <HAL_I2C_Init+0x27c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	bf94      	ite	ls
 8001f7c:	2301      	movls	r3, #1
 8001f7e:	2300      	movhi	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e0e7      	b.n	800215a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4a78      	ldr	r2, [pc, #480]	@ (8002170 <HAL_I2C_Init+0x280>)
 8001f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f92:	0c9b      	lsrs	r3, r3, #18
 8001f94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4a6a      	ldr	r2, [pc, #424]	@ (8002164 <HAL_I2C_Init+0x274>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d802      	bhi.n	8001fc4 <HAL_I2C_Init+0xd4>
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	e009      	b.n	8001fd8 <HAL_I2C_Init+0xe8>
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fca:	fb02 f303 	mul.w	r3, r2, r3
 8001fce:	4a69      	ldr	r2, [pc, #420]	@ (8002174 <HAL_I2C_Init+0x284>)
 8001fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd4:	099b      	lsrs	r3, r3, #6
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001fea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	495c      	ldr	r1, [pc, #368]	@ (8002164 <HAL_I2C_Init+0x274>)
 8001ff4:	428b      	cmp	r3, r1
 8001ff6:	d819      	bhi.n	800202c <HAL_I2C_Init+0x13c>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1e59      	subs	r1, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fbb1 f3f3 	udiv	r3, r1, r3
 8002006:	1c59      	adds	r1, r3, #1
 8002008:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800200c:	400b      	ands	r3, r1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00a      	beq.n	8002028 <HAL_I2C_Init+0x138>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	1e59      	subs	r1, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002020:	3301      	adds	r3, #1
 8002022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002026:	e051      	b.n	80020cc <HAL_I2C_Init+0x1dc>
 8002028:	2304      	movs	r3, #4
 800202a:	e04f      	b.n	80020cc <HAL_I2C_Init+0x1dc>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d111      	bne.n	8002058 <HAL_I2C_Init+0x168>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1e58      	subs	r0, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6859      	ldr	r1, [r3, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	440b      	add	r3, r1
 8002042:	fbb0 f3f3 	udiv	r3, r0, r3
 8002046:	3301      	adds	r3, #1
 8002048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf0c      	ite	eq
 8002050:	2301      	moveq	r3, #1
 8002052:	2300      	movne	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	e012      	b.n	800207e <HAL_I2C_Init+0x18e>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1e58      	subs	r0, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6859      	ldr	r1, [r3, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	0099      	lsls	r1, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	fbb0 f3f3 	udiv	r3, r0, r3
 800206e:	3301      	adds	r3, #1
 8002070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf0c      	ite	eq
 8002078:	2301      	moveq	r3, #1
 800207a:	2300      	movne	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_I2C_Init+0x196>
 8002082:	2301      	movs	r3, #1
 8002084:	e022      	b.n	80020cc <HAL_I2C_Init+0x1dc>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10e      	bne.n	80020ac <HAL_I2C_Init+0x1bc>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1e58      	subs	r0, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6859      	ldr	r1, [r3, #4]
 8002096:	460b      	mov	r3, r1
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	440b      	add	r3, r1
 800209c:	fbb0 f3f3 	udiv	r3, r0, r3
 80020a0:	3301      	adds	r3, #1
 80020a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020aa:	e00f      	b.n	80020cc <HAL_I2C_Init+0x1dc>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1e58      	subs	r0, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	0099      	lsls	r1, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c2:	3301      	adds	r3, #1
 80020c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	6809      	ldr	r1, [r1, #0]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69da      	ldr	r2, [r3, #28]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6911      	ldr	r1, [r2, #16]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68d2      	ldr	r2, [r2, #12]
 8002106:	4311      	orrs	r1, r2
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	430b      	orrs	r3, r1
 800210e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0201 	orr.w	r2, r2, #1
 800213a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2220      	movs	r2, #32
 8002146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	000186a0 	.word	0x000186a0
 8002168:	001e847f 	.word	0x001e847f
 800216c:	003d08ff 	.word	0x003d08ff
 8002170:	431bde83 	.word	0x431bde83
 8002174:	10624dd3 	.word	0x10624dd3

08002178 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af02      	add	r7, sp, #8
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	607a      	str	r2, [r7, #4]
 8002182:	461a      	mov	r2, r3
 8002184:	460b      	mov	r3, r1
 8002186:	817b      	strh	r3, [r7, #10]
 8002188:	4613      	mov	r3, r2
 800218a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800218c:	f7fe fe66 	bl	8000e5c <HAL_GetTick>
 8002190:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b20      	cmp	r3, #32
 800219c:	f040 80e0 	bne.w	8002360 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	2319      	movs	r3, #25
 80021a6:	2201      	movs	r2, #1
 80021a8:	4970      	ldr	r1, [pc, #448]	@ (800236c <HAL_I2C_Master_Transmit+0x1f4>)
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 fa92 	bl	80026d4 <I2C_WaitOnFlagUntilTimeout>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021b6:	2302      	movs	r3, #2
 80021b8:	e0d3      	b.n	8002362 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_I2C_Master_Transmit+0x50>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e0cc      	b.n	8002362 <HAL_I2C_Master_Transmit+0x1ea>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d007      	beq.n	80021ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 0201 	orr.w	r2, r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2221      	movs	r2, #33	@ 0x21
 8002202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2210      	movs	r2, #16
 800220a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	893a      	ldrh	r2, [r7, #8]
 800221e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4a50      	ldr	r2, [pc, #320]	@ (8002370 <HAL_I2C_Master_Transmit+0x1f8>)
 800222e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002230:	8979      	ldrh	r1, [r7, #10]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	6a3a      	ldr	r2, [r7, #32]
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 f9ca 	bl	80025d0 <I2C_MasterRequestWrite>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e08d      	b.n	8002362 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800225c:	e066      	b.n	800232c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	6a39      	ldr	r1, [r7, #32]
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 fb50 	bl	8002908 <I2C_WaitOnTXEFlagUntilTimeout>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00d      	beq.n	800228a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	2b04      	cmp	r3, #4
 8002274:	d107      	bne.n	8002286 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002284:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e06b      	b.n	8002362 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228e:	781a      	ldrb	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d11b      	bne.n	8002300 <HAL_I2C_Master_Transmit+0x188>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d017      	beq.n	8002300 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d4:	781a      	ldrb	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	6a39      	ldr	r1, [r7, #32]
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 fb47 	bl	8002998 <I2C_WaitOnBTFFlagUntilTimeout>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00d      	beq.n	800232c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	2b04      	cmp	r3, #4
 8002316:	d107      	bne.n	8002328 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002326:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e01a      	b.n	8002362 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002330:	2b00      	cmp	r3, #0
 8002332:	d194      	bne.n	800225e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	e000      	b.n	8002362 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002360:	2302      	movs	r3, #2
  }
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	00100002 	.word	0x00100002
 8002370:	ffff0000 	.word	0xffff0000

08002374 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	@ 0x28
 8002378:	af02      	add	r7, sp, #8
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	607a      	str	r2, [r7, #4]
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	460b      	mov	r3, r1
 8002382:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002384:	f7fe fd6a 	bl	8000e5c <HAL_GetTick>
 8002388:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b20      	cmp	r3, #32
 8002398:	f040 8111 	bne.w	80025be <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	2319      	movs	r3, #25
 80023a2:	2201      	movs	r2, #1
 80023a4:	4988      	ldr	r1, [pc, #544]	@ (80025c8 <HAL_I2C_IsDeviceReady+0x254>)
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f994 	bl	80026d4 <I2C_WaitOnFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80023b2:	2302      	movs	r3, #2
 80023b4:	e104      	b.n	80025c0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_I2C_IsDeviceReady+0x50>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e0fd      	b.n	80025c0 <HAL_I2C_IsDeviceReady+0x24c>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d007      	beq.n	80023ea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f042 0201 	orr.w	r2, r2, #1
 80023e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2224      	movs	r2, #36	@ 0x24
 80023fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4a70      	ldr	r2, [pc, #448]	@ (80025cc <HAL_I2C_IsDeviceReady+0x258>)
 800240c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800241c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2200      	movs	r2, #0
 8002426:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 f952 	bl	80026d4 <I2C_WaitOnFlagUntilTimeout>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00d      	beq.n	8002452 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002440:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002444:	d103      	bne.n	800244e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800244c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e0b6      	b.n	80025c0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002452:	897b      	ldrh	r3, [r7, #10]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	461a      	mov	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002460:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002462:	f7fe fcfb 	bl	8000e5c <HAL_GetTick>
 8002466:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b02      	cmp	r3, #2
 8002474:	bf0c      	ite	eq
 8002476:	2301      	moveq	r3, #1
 8002478:	2300      	movne	r3, #0
 800247a:	b2db      	uxtb	r3, r3
 800247c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002488:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800248c:	bf0c      	ite	eq
 800248e:	2301      	moveq	r3, #1
 8002490:	2300      	movne	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002496:	e025      	b.n	80024e4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002498:	f7fe fce0 	bl	8000e5c <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d302      	bcc.n	80024ae <HAL_I2C_IsDeviceReady+0x13a>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d103      	bne.n	80024b6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	22a0      	movs	r2, #160	@ 0xa0
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	bf0c      	ite	eq
 80024c4:	2301      	moveq	r3, #1
 80024c6:	2300      	movne	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2ba0      	cmp	r3, #160	@ 0xa0
 80024ee:	d005      	beq.n	80024fc <HAL_I2C_IsDeviceReady+0x188>
 80024f0:	7dfb      	ldrb	r3, [r7, #23]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d102      	bne.n	80024fc <HAL_I2C_IsDeviceReady+0x188>
 80024f6:	7dbb      	ldrb	r3, [r7, #22]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0cd      	beq.n	8002498 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b02      	cmp	r3, #2
 8002510:	d129      	bne.n	8002566 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002520:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2319      	movs	r3, #25
 800253e:	2201      	movs	r2, #1
 8002540:	4921      	ldr	r1, [pc, #132]	@ (80025c8 <HAL_I2C_IsDeviceReady+0x254>)
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f8c6 	bl	80026d4 <I2C_WaitOnFlagUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e036      	b.n	80025c0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2220      	movs	r2, #32
 8002556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	e02c      	b.n	80025c0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002574:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800257e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	2319      	movs	r3, #25
 8002586:	2201      	movs	r2, #1
 8002588:	490f      	ldr	r1, [pc, #60]	@ (80025c8 <HAL_I2C_IsDeviceReady+0x254>)
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 f8a2 	bl	80026d4 <I2C_WaitOnFlagUntilTimeout>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e012      	b.n	80025c0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	3301      	adds	r3, #1
 800259e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	f4ff af32 	bcc.w	800240e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2220      	movs	r2, #32
 80025ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80025be:	2302      	movs	r3, #2
  }
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3720      	adds	r7, #32
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	00100002 	.word	0x00100002
 80025cc:	ffff0000 	.word	0xffff0000

080025d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	603b      	str	r3, [r7, #0]
 80025dc:	460b      	mov	r3, r1
 80025de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d006      	beq.n	80025fa <I2C_MasterRequestWrite+0x2a>
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d003      	beq.n	80025fa <I2C_MasterRequestWrite+0x2a>
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025f8:	d108      	bne.n	800260c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	e00b      	b.n	8002624 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002610:	2b12      	cmp	r3, #18
 8002612:	d107      	bne.n	8002624 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002622:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 f84f 	bl	80026d4 <I2C_WaitOnFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00d      	beq.n	8002658 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800264a:	d103      	bne.n	8002654 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002652:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e035      	b.n	80026c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002660:	d108      	bne.n	8002674 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002662:	897b      	ldrh	r3, [r7, #10]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002670:	611a      	str	r2, [r3, #16]
 8002672:	e01b      	b.n	80026ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002674:	897b      	ldrh	r3, [r7, #10]
 8002676:	11db      	asrs	r3, r3, #7
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f003 0306 	and.w	r3, r3, #6
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f063 030f 	orn	r3, r3, #15
 8002684:	b2da      	uxtb	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	490e      	ldr	r1, [pc, #56]	@ (80026cc <I2C_MasterRequestWrite+0xfc>)
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 f898 	bl	80027c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e010      	b.n	80026c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026a2:	897b      	ldrh	r3, [r7, #10]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	4907      	ldr	r1, [pc, #28]	@ (80026d0 <I2C_MasterRequestWrite+0x100>)
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 f888 	bl	80027c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	00010008 	.word	0x00010008
 80026d0:	00010002 	.word	0x00010002

080026d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	4613      	mov	r3, r2
 80026e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e4:	e048      	b.n	8002778 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ec:	d044      	beq.n	8002778 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ee:	f7fe fbb5 	bl	8000e5c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d302      	bcc.n	8002704 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d139      	bne.n	8002778 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	0c1b      	lsrs	r3, r3, #16
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d10d      	bne.n	800272a <I2C_WaitOnFlagUntilTimeout+0x56>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	43da      	mvns	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	4013      	ands	r3, r2
 800271a:	b29b      	uxth	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	e00c      	b.n	8002744 <I2C_WaitOnFlagUntilTimeout+0x70>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	43da      	mvns	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	4013      	ands	r3, r2
 8002736:	b29b      	uxth	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf0c      	ite	eq
 800273c:	2301      	moveq	r3, #1
 800273e:	2300      	movne	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	429a      	cmp	r2, r3
 8002748:	d116      	bne.n	8002778 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002764:	f043 0220 	orr.w	r2, r3, #32
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e023      	b.n	80027c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	0c1b      	lsrs	r3, r3, #16
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b01      	cmp	r3, #1
 8002780:	d10d      	bne.n	800279e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	43da      	mvns	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	4013      	ands	r3, r2
 800278e:	b29b      	uxth	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	bf0c      	ite	eq
 8002794:	2301      	moveq	r3, #1
 8002796:	2300      	movne	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	461a      	mov	r2, r3
 800279c:	e00c      	b.n	80027b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	43da      	mvns	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	4013      	ands	r3, r2
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bf0c      	ite	eq
 80027b0:	2301      	moveq	r3, #1
 80027b2:	2300      	movne	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	461a      	mov	r2, r3
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d093      	beq.n	80026e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027d6:	e071      	b.n	80028bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027e6:	d123      	bne.n	8002830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002800:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281c:	f043 0204 	orr.w	r2, r3, #4
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e067      	b.n	8002900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002836:	d041      	beq.n	80028bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002838:	f7fe fb10 	bl	8000e5c <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	429a      	cmp	r2, r3
 8002846:	d302      	bcc.n	800284e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d136      	bne.n	80028bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	0c1b      	lsrs	r3, r3, #16
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b01      	cmp	r3, #1
 8002856:	d10c      	bne.n	8002872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	43da      	mvns	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	4013      	ands	r3, r2
 8002864:	b29b      	uxth	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	bf14      	ite	ne
 800286a:	2301      	movne	r3, #1
 800286c:	2300      	moveq	r3, #0
 800286e:	b2db      	uxtb	r3, r3
 8002870:	e00b      	b.n	800288a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	43da      	mvns	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	4013      	ands	r3, r2
 800287e:	b29b      	uxth	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf14      	ite	ne
 8002884:	2301      	movne	r3, #1
 8002886:	2300      	moveq	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d016      	beq.n	80028bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e021      	b.n	8002900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	0c1b      	lsrs	r3, r3, #16
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d10c      	bne.n	80028e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	43da      	mvns	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	4013      	ands	r3, r2
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf14      	ite	ne
 80028d8:	2301      	movne	r3, #1
 80028da:	2300      	moveq	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	e00b      	b.n	80028f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	43da      	mvns	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4013      	ands	r3, r2
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bf14      	ite	ne
 80028f2:	2301      	movne	r3, #1
 80028f4:	2300      	moveq	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f47f af6d 	bne.w	80027d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002914:	e034      	b.n	8002980 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f886 	bl	8002a28 <I2C_IsAcknowledgeFailed>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e034      	b.n	8002990 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292c:	d028      	beq.n	8002980 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292e:	f7fe fa95 	bl	8000e5c <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	429a      	cmp	r2, r3
 800293c:	d302      	bcc.n	8002944 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d11d      	bne.n	8002980 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800294e:	2b80      	cmp	r3, #128	@ 0x80
 8002950:	d016      	beq.n	8002980 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296c:	f043 0220 	orr.w	r2, r3, #32
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e007      	b.n	8002990 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800298a:	2b80      	cmp	r3, #128	@ 0x80
 800298c:	d1c3      	bne.n	8002916 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029a4:	e034      	b.n	8002a10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f83e 	bl	8002a28 <I2C_IsAcknowledgeFailed>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e034      	b.n	8002a20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d028      	beq.n	8002a10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029be:	f7fe fa4d 	bl	8000e5c <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d302      	bcc.n	80029d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d11d      	bne.n	8002a10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d016      	beq.n	8002a10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fc:	f043 0220 	orr.w	r2, r3, #32
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e007      	b.n	8002a20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d1c3      	bne.n	80029a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a3e:	d11b      	bne.n	8002a78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a64:	f043 0204 	orr.w	r2, r3, #4
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e272      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 8087 	beq.w	8002bb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aa4:	4b92      	ldr	r3, [pc, #584]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 030c 	and.w	r3, r3, #12
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d00c      	beq.n	8002aca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ab0:	4b8f      	ldr	r3, [pc, #572]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 030c 	and.w	r3, r3, #12
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d112      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x5e>
 8002abc:	4b8c      	ldr	r3, [pc, #560]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ac8:	d10b      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aca:	4b89      	ldr	r3, [pc, #548]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d06c      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x12c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d168      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e24c      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aea:	d106      	bne.n	8002afa <HAL_RCC_OscConfig+0x76>
 8002aec:	4b80      	ldr	r3, [pc, #512]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a7f      	ldr	r2, [pc, #508]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	e02e      	b.n	8002b58 <HAL_RCC_OscConfig+0xd4>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10c      	bne.n	8002b1c <HAL_RCC_OscConfig+0x98>
 8002b02:	4b7b      	ldr	r3, [pc, #492]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a7a      	ldr	r2, [pc, #488]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	4b78      	ldr	r3, [pc, #480]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a77      	ldr	r2, [pc, #476]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	e01d      	b.n	8002b58 <HAL_RCC_OscConfig+0xd4>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCC_OscConfig+0xbc>
 8002b26:	4b72      	ldr	r3, [pc, #456]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a71      	ldr	r2, [pc, #452]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	4b6f      	ldr	r3, [pc, #444]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a6e      	ldr	r2, [pc, #440]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e00b      	b.n	8002b58 <HAL_RCC_OscConfig+0xd4>
 8002b40:	4b6b      	ldr	r3, [pc, #428]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a6a      	ldr	r2, [pc, #424]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	4b68      	ldr	r3, [pc, #416]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a67      	ldr	r2, [pc, #412]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d013      	beq.n	8002b88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7fe f97c 	bl	8000e5c <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b68:	f7fe f978 	bl	8000e5c <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b64      	cmp	r3, #100	@ 0x64
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e200      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7a:	4b5d      	ldr	r3, [pc, #372]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0xe4>
 8002b86:	e014      	b.n	8002bb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7fe f968 	bl	8000e5c <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b90:	f7fe f964 	bl	8000e5c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	@ 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e1ec      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba2:	4b53      	ldr	r3, [pc, #332]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x10c>
 8002bae:	e000      	b.n	8002bb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d063      	beq.n	8002c86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bbe:	4b4c      	ldr	r3, [pc, #304]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00b      	beq.n	8002be2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bca:	4b49      	ldr	r3, [pc, #292]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d11c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x18c>
 8002bd6:	4b46      	ldr	r3, [pc, #280]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d116      	bne.n	8002c10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be2:	4b43      	ldr	r3, [pc, #268]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_RCC_OscConfig+0x176>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d001      	beq.n	8002bfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e1c0      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfa:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4939      	ldr	r1, [pc, #228]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0e:	e03a      	b.n	8002c86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d020      	beq.n	8002c5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c18:	4b36      	ldr	r3, [pc, #216]	@ (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1e:	f7fe f91d 	bl	8000e5c <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c26:	f7fe f919 	bl	8000e5c <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e1a1      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c38:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c44:	4b2a      	ldr	r3, [pc, #168]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4927      	ldr	r1, [pc, #156]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]
 8002c58:	e015      	b.n	8002c86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5a:	4b26      	ldr	r3, [pc, #152]	@ (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7fe f8fc 	bl	8000e5c <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c68:	f7fe f8f8 	bl	8000e5c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e180      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d03a      	beq.n	8002d08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d019      	beq.n	8002cce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c9a:	4b17      	ldr	r3, [pc, #92]	@ (8002cf8 <HAL_RCC_OscConfig+0x274>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca0:	f7fe f8dc 	bl	8000e5c <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca8:	f7fe f8d8 	bl	8000e5c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e160      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cba:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f000 faba 	bl	8003240 <RCC_Delay>
 8002ccc:	e01c      	b.n	8002d08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cce:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf8 <HAL_RCC_OscConfig+0x274>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd4:	f7fe f8c2 	bl	8000e5c <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cda:	e00f      	b.n	8002cfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cdc:	f7fe f8be 	bl	8000e5c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d908      	bls.n	8002cfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e146      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	42420000 	.word	0x42420000
 8002cf8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cfc:	4b92      	ldr	r3, [pc, #584]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e9      	bne.n	8002cdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80a6 	beq.w	8002e62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d16:	2300      	movs	r3, #0
 8002d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1a:	4b8b      	ldr	r3, [pc, #556]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10d      	bne.n	8002d42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	4b88      	ldr	r3, [pc, #544]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	4a87      	ldr	r2, [pc, #540]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d30:	61d3      	str	r3, [r2, #28]
 8002d32:	4b85      	ldr	r3, [pc, #532]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d42:	4b82      	ldr	r3, [pc, #520]	@ (8002f4c <HAL_RCC_OscConfig+0x4c8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d118      	bne.n	8002d80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d4e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f4c <HAL_RCC_OscConfig+0x4c8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a7e      	ldr	r2, [pc, #504]	@ (8002f4c <HAL_RCC_OscConfig+0x4c8>)
 8002d54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5a:	f7fe f87f 	bl	8000e5c <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d62:	f7fe f87b 	bl	8000e5c <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b64      	cmp	r3, #100	@ 0x64
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e103      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d74:	4b75      	ldr	r3, [pc, #468]	@ (8002f4c <HAL_RCC_OscConfig+0x4c8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d106      	bne.n	8002d96 <HAL_RCC_OscConfig+0x312>
 8002d88:	4b6f      	ldr	r3, [pc, #444]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	4a6e      	ldr	r2, [pc, #440]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6213      	str	r3, [r2, #32]
 8002d94:	e02d      	b.n	8002df2 <HAL_RCC_OscConfig+0x36e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCC_OscConfig+0x334>
 8002d9e:	4b6a      	ldr	r3, [pc, #424]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4a69      	ldr	r2, [pc, #420]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002da4:	f023 0301 	bic.w	r3, r3, #1
 8002da8:	6213      	str	r3, [r2, #32]
 8002daa:	4b67      	ldr	r3, [pc, #412]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	4a66      	ldr	r2, [pc, #408]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002db0:	f023 0304 	bic.w	r3, r3, #4
 8002db4:	6213      	str	r3, [r2, #32]
 8002db6:	e01c      	b.n	8002df2 <HAL_RCC_OscConfig+0x36e>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	2b05      	cmp	r3, #5
 8002dbe:	d10c      	bne.n	8002dda <HAL_RCC_OscConfig+0x356>
 8002dc0:	4b61      	ldr	r3, [pc, #388]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	4a60      	ldr	r2, [pc, #384]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002dc6:	f043 0304 	orr.w	r3, r3, #4
 8002dca:	6213      	str	r3, [r2, #32]
 8002dcc:	4b5e      	ldr	r3, [pc, #376]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4a5d      	ldr	r2, [pc, #372]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6213      	str	r3, [r2, #32]
 8002dd8:	e00b      	b.n	8002df2 <HAL_RCC_OscConfig+0x36e>
 8002dda:	4b5b      	ldr	r3, [pc, #364]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	4a5a      	ldr	r2, [pc, #360]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	f023 0301 	bic.w	r3, r3, #1
 8002de4:	6213      	str	r3, [r2, #32]
 8002de6:	4b58      	ldr	r3, [pc, #352]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	4a57      	ldr	r2, [pc, #348]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	f023 0304 	bic.w	r3, r3, #4
 8002df0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d015      	beq.n	8002e26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfa:	f7fe f82f 	bl	8000e5c <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e00:	e00a      	b.n	8002e18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e02:	f7fe f82b 	bl	8000e5c <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e0b1      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e18:	4b4b      	ldr	r3, [pc, #300]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0ee      	beq.n	8002e02 <HAL_RCC_OscConfig+0x37e>
 8002e24:	e014      	b.n	8002e50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e26:	f7fe f819 	bl	8000e5c <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e2c:	e00a      	b.n	8002e44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2e:	f7fe f815 	bl	8000e5c <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e09b      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e44:	4b40      	ldr	r3, [pc, #256]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1ee      	bne.n	8002e2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d105      	bne.n	8002e62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e56:	4b3c      	ldr	r3, [pc, #240]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	4a3b      	ldr	r2, [pc, #236]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 8087 	beq.w	8002f7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e6c:	4b36      	ldr	r3, [pc, #216]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 030c 	and.w	r3, r3, #12
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d061      	beq.n	8002f3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d146      	bne.n	8002f0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e80:	4b33      	ldr	r3, [pc, #204]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7fd ffe9 	bl	8000e5c <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8e:	f7fd ffe5 	bl	8000e5c <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e06d      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea0:	4b29      	ldr	r3, [pc, #164]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1f0      	bne.n	8002e8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eb4:	d108      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002eb6:	4b24      	ldr	r3, [pc, #144]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	4921      	ldr	r1, [pc, #132]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a19      	ldr	r1, [r3, #32]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	491b      	ldr	r1, [pc, #108]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7fd ffb9 	bl	8000e5c <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eee:	f7fd ffb5 	bl	8000e5c <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e03d      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f00:	4b11      	ldr	r3, [pc, #68]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x46a>
 8002f0c:	e035      	b.n	8002f7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fd ffa2 	bl	8000e5c <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fd ff9e 	bl	8000e5c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e026      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f2e:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x498>
 8002f3a:	e01e      	b.n	8002f7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e019      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f54:	4b0b      	ldr	r3, [pc, #44]	@ (8002f84 <HAL_RCC_OscConfig+0x500>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d106      	bne.n	8002f76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d001      	beq.n	8002f7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40021000 	.word	0x40021000

08002f88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0d0      	b.n	800313e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f9c:	4b6a      	ldr	r3, [pc, #424]	@ (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d910      	bls.n	8002fcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002faa:	4b67      	ldr	r3, [pc, #412]	@ (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 0207 	bic.w	r2, r3, #7
 8002fb2:	4965      	ldr	r1, [pc, #404]	@ (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b63      	ldr	r3, [pc, #396]	@ (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0b8      	b.n	800313e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d020      	beq.n	800301a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fe4:	4b59      	ldr	r3, [pc, #356]	@ (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4a58      	ldr	r2, [pc, #352]	@ (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002fee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ffc:	4b53      	ldr	r3, [pc, #332]	@ (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4a52      	ldr	r2, [pc, #328]	@ (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003006:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003008:	4b50      	ldr	r3, [pc, #320]	@ (800314c <HAL_RCC_ClockConfig+0x1c4>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	494d      	ldr	r1, [pc, #308]	@ (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003016:	4313      	orrs	r3, r2
 8003018:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d040      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d107      	bne.n	800303e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302e:	4b47      	ldr	r3, [pc, #284]	@ (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d115      	bne.n	8003066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e07f      	b.n	800313e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d107      	bne.n	8003056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003046:	4b41      	ldr	r3, [pc, #260]	@ (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e073      	b.n	800313e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003056:	4b3d      	ldr	r3, [pc, #244]	@ (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e06b      	b.n	800313e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003066:	4b39      	ldr	r3, [pc, #228]	@ (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f023 0203 	bic.w	r2, r3, #3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	4936      	ldr	r1, [pc, #216]	@ (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	4313      	orrs	r3, r2
 8003076:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003078:	f7fd fef0 	bl	8000e5c <HAL_GetTick>
 800307c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	e00a      	b.n	8003096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003080:	f7fd feec 	bl	8000e5c <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e053      	b.n	800313e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003096:	4b2d      	ldr	r3, [pc, #180]	@ (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f003 020c 	and.w	r2, r3, #12
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d1eb      	bne.n	8003080 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030a8:	4b27      	ldr	r3, [pc, #156]	@ (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d210      	bcs.n	80030d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b6:	4b24      	ldr	r3, [pc, #144]	@ (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 0207 	bic.w	r2, r3, #7
 80030be:	4922      	ldr	r1, [pc, #136]	@ (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c6:	4b20      	ldr	r3, [pc, #128]	@ (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e032      	b.n	800313e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e4:	4b19      	ldr	r3, [pc, #100]	@ (800314c <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4916      	ldr	r1, [pc, #88]	@ (800314c <HAL_RCC_ClockConfig+0x1c4>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d009      	beq.n	8003116 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003102:	4b12      	ldr	r3, [pc, #72]	@ (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	490e      	ldr	r1, [pc, #56]	@ (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	4313      	orrs	r3, r2
 8003114:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003116:	f000 f821 	bl	800315c <HAL_RCC_GetSysClockFreq>
 800311a:	4602      	mov	r2, r0
 800311c:	4b0b      	ldr	r3, [pc, #44]	@ (800314c <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	091b      	lsrs	r3, r3, #4
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	490a      	ldr	r1, [pc, #40]	@ (8003150 <HAL_RCC_ClockConfig+0x1c8>)
 8003128:	5ccb      	ldrb	r3, [r1, r3]
 800312a:	fa22 f303 	lsr.w	r3, r2, r3
 800312e:	4a09      	ldr	r2, [pc, #36]	@ (8003154 <HAL_RCC_ClockConfig+0x1cc>)
 8003130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003132:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <HAL_RCC_ClockConfig+0x1d0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd fe4e 	bl	8000dd8 <HAL_InitTick>

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40022000 	.word	0x40022000
 800314c:	40021000 	.word	0x40021000
 8003150:	080043cc 	.word	0x080043cc
 8003154:	20000008 	.word	0x20000008
 8003158:	2000000c 	.word	0x2000000c

0800315c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	2300      	movs	r3, #0
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	2300      	movs	r3, #0
 8003170:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003176:	4b1e      	ldr	r3, [pc, #120]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b04      	cmp	r3, #4
 8003184:	d002      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x30>
 8003186:	2b08      	cmp	r3, #8
 8003188:	d003      	beq.n	8003192 <HAL_RCC_GetSysClockFreq+0x36>
 800318a:	e027      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800318c:	4b19      	ldr	r3, [pc, #100]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800318e:	613b      	str	r3, [r7, #16]
      break;
 8003190:	e027      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	0c9b      	lsrs	r3, r3, #18
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	4a17      	ldr	r2, [pc, #92]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800319c:	5cd3      	ldrb	r3, [r2, r3]
 800319e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d010      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031aa:	4b11      	ldr	r3, [pc, #68]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	0c5b      	lsrs	r3, r3, #17
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	4a11      	ldr	r2, [pc, #68]	@ (80031fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80031b6:	5cd3      	ldrb	r3, [r2, r3]
 80031b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a0d      	ldr	r2, [pc, #52]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80031be:	fb03 f202 	mul.w	r2, r3, r2
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	e004      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003200 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031d0:	fb02 f303 	mul.w	r3, r2, r3
 80031d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	613b      	str	r3, [r7, #16]
      break;
 80031da:	e002      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031dc:	4b05      	ldr	r3, [pc, #20]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80031de:	613b      	str	r3, [r7, #16]
      break;
 80031e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e2:	693b      	ldr	r3, [r7, #16]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	371c      	adds	r7, #28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40021000 	.word	0x40021000
 80031f4:	007a1200 	.word	0x007a1200
 80031f8:	080043e4 	.word	0x080043e4
 80031fc:	080043f4 	.word	0x080043f4
 8003200:	003d0900 	.word	0x003d0900

08003204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003208:	4b02      	ldr	r3, [pc, #8]	@ (8003214 <HAL_RCC_GetHCLKFreq+0x10>)
 800320a:	681b      	ldr	r3, [r3, #0]
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr
 8003214:	20000008 	.word	0x20000008

08003218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800321c:	f7ff fff2 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 8003220:	4602      	mov	r2, r0
 8003222:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	0a1b      	lsrs	r3, r3, #8
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	4903      	ldr	r1, [pc, #12]	@ (800323c <HAL_RCC_GetPCLK1Freq+0x24>)
 800322e:	5ccb      	ldrb	r3, [r1, r3]
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40021000 	.word	0x40021000
 800323c:	080043dc 	.word	0x080043dc

08003240 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003248:	4b0a      	ldr	r3, [pc, #40]	@ (8003274 <RCC_Delay+0x34>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a0a      	ldr	r2, [pc, #40]	@ (8003278 <RCC_Delay+0x38>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	0a5b      	lsrs	r3, r3, #9
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	fb02 f303 	mul.w	r3, r2, r3
 800325a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800325c:	bf00      	nop
  }
  while (Delay --);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1e5a      	subs	r2, r3, #1
 8003262:	60fa      	str	r2, [r7, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f9      	bne.n	800325c <RCC_Delay+0x1c>
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	20000008 	.word	0x20000008
 8003278:	10624dd3 	.word	0x10624dd3

0800327c <sniprintf>:
 800327c:	b40c      	push	{r2, r3}
 800327e:	b530      	push	{r4, r5, lr}
 8003280:	4b17      	ldr	r3, [pc, #92]	@ (80032e0 <sniprintf+0x64>)
 8003282:	1e0c      	subs	r4, r1, #0
 8003284:	681d      	ldr	r5, [r3, #0]
 8003286:	b09d      	sub	sp, #116	@ 0x74
 8003288:	da08      	bge.n	800329c <sniprintf+0x20>
 800328a:	238b      	movs	r3, #139	@ 0x8b
 800328c:	f04f 30ff 	mov.w	r0, #4294967295
 8003290:	602b      	str	r3, [r5, #0]
 8003292:	b01d      	add	sp, #116	@ 0x74
 8003294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003298:	b002      	add	sp, #8
 800329a:	4770      	bx	lr
 800329c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80032a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80032a4:	bf0c      	ite	eq
 80032a6:	4623      	moveq	r3, r4
 80032a8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80032ac:	9304      	str	r3, [sp, #16]
 80032ae:	9307      	str	r3, [sp, #28]
 80032b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032b4:	9002      	str	r0, [sp, #8]
 80032b6:	9006      	str	r0, [sp, #24]
 80032b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80032bc:	4628      	mov	r0, r5
 80032be:	ab21      	add	r3, sp, #132	@ 0x84
 80032c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80032c2:	a902      	add	r1, sp, #8
 80032c4:	9301      	str	r3, [sp, #4]
 80032c6:	f000 f993 	bl	80035f0 <_svfiprintf_r>
 80032ca:	1c43      	adds	r3, r0, #1
 80032cc:	bfbc      	itt	lt
 80032ce:	238b      	movlt	r3, #139	@ 0x8b
 80032d0:	602b      	strlt	r3, [r5, #0]
 80032d2:	2c00      	cmp	r4, #0
 80032d4:	d0dd      	beq.n	8003292 <sniprintf+0x16>
 80032d6:	2200      	movs	r2, #0
 80032d8:	9b02      	ldr	r3, [sp, #8]
 80032da:	701a      	strb	r2, [r3, #0]
 80032dc:	e7d9      	b.n	8003292 <sniprintf+0x16>
 80032de:	bf00      	nop
 80032e0:	20000014 	.word	0x20000014

080032e4 <memset>:
 80032e4:	4603      	mov	r3, r0
 80032e6:	4402      	add	r2, r0
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d100      	bne.n	80032ee <memset+0xa>
 80032ec:	4770      	bx	lr
 80032ee:	f803 1b01 	strb.w	r1, [r3], #1
 80032f2:	e7f9      	b.n	80032e8 <memset+0x4>

080032f4 <__errno>:
 80032f4:	4b01      	ldr	r3, [pc, #4]	@ (80032fc <__errno+0x8>)
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	20000014 	.word	0x20000014

08003300 <__libc_init_array>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	2600      	movs	r6, #0
 8003304:	4d0c      	ldr	r5, [pc, #48]	@ (8003338 <__libc_init_array+0x38>)
 8003306:	4c0d      	ldr	r4, [pc, #52]	@ (800333c <__libc_init_array+0x3c>)
 8003308:	1b64      	subs	r4, r4, r5
 800330a:	10a4      	asrs	r4, r4, #2
 800330c:	42a6      	cmp	r6, r4
 800330e:	d109      	bne.n	8003324 <__libc_init_array+0x24>
 8003310:	f000 fc78 	bl	8003c04 <_init>
 8003314:	2600      	movs	r6, #0
 8003316:	4d0a      	ldr	r5, [pc, #40]	@ (8003340 <__libc_init_array+0x40>)
 8003318:	4c0a      	ldr	r4, [pc, #40]	@ (8003344 <__libc_init_array+0x44>)
 800331a:	1b64      	subs	r4, r4, r5
 800331c:	10a4      	asrs	r4, r4, #2
 800331e:	42a6      	cmp	r6, r4
 8003320:	d105      	bne.n	800332e <__libc_init_array+0x2e>
 8003322:	bd70      	pop	{r4, r5, r6, pc}
 8003324:	f855 3b04 	ldr.w	r3, [r5], #4
 8003328:	4798      	blx	r3
 800332a:	3601      	adds	r6, #1
 800332c:	e7ee      	b.n	800330c <__libc_init_array+0xc>
 800332e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003332:	4798      	blx	r3
 8003334:	3601      	adds	r6, #1
 8003336:	e7f2      	b.n	800331e <__libc_init_array+0x1e>
 8003338:	08004434 	.word	0x08004434
 800333c:	08004434 	.word	0x08004434
 8003340:	08004434 	.word	0x08004434
 8003344:	08004438 	.word	0x08004438

08003348 <__retarget_lock_acquire_recursive>:
 8003348:	4770      	bx	lr

0800334a <__retarget_lock_release_recursive>:
 800334a:	4770      	bx	lr

0800334c <_free_r>:
 800334c:	b538      	push	{r3, r4, r5, lr}
 800334e:	4605      	mov	r5, r0
 8003350:	2900      	cmp	r1, #0
 8003352:	d040      	beq.n	80033d6 <_free_r+0x8a>
 8003354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003358:	1f0c      	subs	r4, r1, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	bfb8      	it	lt
 800335e:	18e4      	addlt	r4, r4, r3
 8003360:	f000 f8de 	bl	8003520 <__malloc_lock>
 8003364:	4a1c      	ldr	r2, [pc, #112]	@ (80033d8 <_free_r+0x8c>)
 8003366:	6813      	ldr	r3, [r2, #0]
 8003368:	b933      	cbnz	r3, 8003378 <_free_r+0x2c>
 800336a:	6063      	str	r3, [r4, #4]
 800336c:	6014      	str	r4, [r2, #0]
 800336e:	4628      	mov	r0, r5
 8003370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003374:	f000 b8da 	b.w	800352c <__malloc_unlock>
 8003378:	42a3      	cmp	r3, r4
 800337a:	d908      	bls.n	800338e <_free_r+0x42>
 800337c:	6820      	ldr	r0, [r4, #0]
 800337e:	1821      	adds	r1, r4, r0
 8003380:	428b      	cmp	r3, r1
 8003382:	bf01      	itttt	eq
 8003384:	6819      	ldreq	r1, [r3, #0]
 8003386:	685b      	ldreq	r3, [r3, #4]
 8003388:	1809      	addeq	r1, r1, r0
 800338a:	6021      	streq	r1, [r4, #0]
 800338c:	e7ed      	b.n	800336a <_free_r+0x1e>
 800338e:	461a      	mov	r2, r3
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	b10b      	cbz	r3, 8003398 <_free_r+0x4c>
 8003394:	42a3      	cmp	r3, r4
 8003396:	d9fa      	bls.n	800338e <_free_r+0x42>
 8003398:	6811      	ldr	r1, [r2, #0]
 800339a:	1850      	adds	r0, r2, r1
 800339c:	42a0      	cmp	r0, r4
 800339e:	d10b      	bne.n	80033b8 <_free_r+0x6c>
 80033a0:	6820      	ldr	r0, [r4, #0]
 80033a2:	4401      	add	r1, r0
 80033a4:	1850      	adds	r0, r2, r1
 80033a6:	4283      	cmp	r3, r0
 80033a8:	6011      	str	r1, [r2, #0]
 80033aa:	d1e0      	bne.n	800336e <_free_r+0x22>
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4408      	add	r0, r1
 80033b2:	6010      	str	r0, [r2, #0]
 80033b4:	6053      	str	r3, [r2, #4]
 80033b6:	e7da      	b.n	800336e <_free_r+0x22>
 80033b8:	d902      	bls.n	80033c0 <_free_r+0x74>
 80033ba:	230c      	movs	r3, #12
 80033bc:	602b      	str	r3, [r5, #0]
 80033be:	e7d6      	b.n	800336e <_free_r+0x22>
 80033c0:	6820      	ldr	r0, [r4, #0]
 80033c2:	1821      	adds	r1, r4, r0
 80033c4:	428b      	cmp	r3, r1
 80033c6:	bf01      	itttt	eq
 80033c8:	6819      	ldreq	r1, [r3, #0]
 80033ca:	685b      	ldreq	r3, [r3, #4]
 80033cc:	1809      	addeq	r1, r1, r0
 80033ce:	6021      	streq	r1, [r4, #0]
 80033d0:	6063      	str	r3, [r4, #4]
 80033d2:	6054      	str	r4, [r2, #4]
 80033d4:	e7cb      	b.n	800336e <_free_r+0x22>
 80033d6:	bd38      	pop	{r3, r4, r5, pc}
 80033d8:	2000069c 	.word	0x2000069c

080033dc <sbrk_aligned>:
 80033dc:	b570      	push	{r4, r5, r6, lr}
 80033de:	4e0f      	ldr	r6, [pc, #60]	@ (800341c <sbrk_aligned+0x40>)
 80033e0:	460c      	mov	r4, r1
 80033e2:	6831      	ldr	r1, [r6, #0]
 80033e4:	4605      	mov	r5, r0
 80033e6:	b911      	cbnz	r1, 80033ee <sbrk_aligned+0x12>
 80033e8:	f000 fbaa 	bl	8003b40 <_sbrk_r>
 80033ec:	6030      	str	r0, [r6, #0]
 80033ee:	4621      	mov	r1, r4
 80033f0:	4628      	mov	r0, r5
 80033f2:	f000 fba5 	bl	8003b40 <_sbrk_r>
 80033f6:	1c43      	adds	r3, r0, #1
 80033f8:	d103      	bne.n	8003402 <sbrk_aligned+0x26>
 80033fa:	f04f 34ff 	mov.w	r4, #4294967295
 80033fe:	4620      	mov	r0, r4
 8003400:	bd70      	pop	{r4, r5, r6, pc}
 8003402:	1cc4      	adds	r4, r0, #3
 8003404:	f024 0403 	bic.w	r4, r4, #3
 8003408:	42a0      	cmp	r0, r4
 800340a:	d0f8      	beq.n	80033fe <sbrk_aligned+0x22>
 800340c:	1a21      	subs	r1, r4, r0
 800340e:	4628      	mov	r0, r5
 8003410:	f000 fb96 	bl	8003b40 <_sbrk_r>
 8003414:	3001      	adds	r0, #1
 8003416:	d1f2      	bne.n	80033fe <sbrk_aligned+0x22>
 8003418:	e7ef      	b.n	80033fa <sbrk_aligned+0x1e>
 800341a:	bf00      	nop
 800341c:	20000698 	.word	0x20000698

08003420 <_malloc_r>:
 8003420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003424:	1ccd      	adds	r5, r1, #3
 8003426:	f025 0503 	bic.w	r5, r5, #3
 800342a:	3508      	adds	r5, #8
 800342c:	2d0c      	cmp	r5, #12
 800342e:	bf38      	it	cc
 8003430:	250c      	movcc	r5, #12
 8003432:	2d00      	cmp	r5, #0
 8003434:	4606      	mov	r6, r0
 8003436:	db01      	blt.n	800343c <_malloc_r+0x1c>
 8003438:	42a9      	cmp	r1, r5
 800343a:	d904      	bls.n	8003446 <_malloc_r+0x26>
 800343c:	230c      	movs	r3, #12
 800343e:	6033      	str	r3, [r6, #0]
 8003440:	2000      	movs	r0, #0
 8003442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003446:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800351c <_malloc_r+0xfc>
 800344a:	f000 f869 	bl	8003520 <__malloc_lock>
 800344e:	f8d8 3000 	ldr.w	r3, [r8]
 8003452:	461c      	mov	r4, r3
 8003454:	bb44      	cbnz	r4, 80034a8 <_malloc_r+0x88>
 8003456:	4629      	mov	r1, r5
 8003458:	4630      	mov	r0, r6
 800345a:	f7ff ffbf 	bl	80033dc <sbrk_aligned>
 800345e:	1c43      	adds	r3, r0, #1
 8003460:	4604      	mov	r4, r0
 8003462:	d158      	bne.n	8003516 <_malloc_r+0xf6>
 8003464:	f8d8 4000 	ldr.w	r4, [r8]
 8003468:	4627      	mov	r7, r4
 800346a:	2f00      	cmp	r7, #0
 800346c:	d143      	bne.n	80034f6 <_malloc_r+0xd6>
 800346e:	2c00      	cmp	r4, #0
 8003470:	d04b      	beq.n	800350a <_malloc_r+0xea>
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	4639      	mov	r1, r7
 8003476:	4630      	mov	r0, r6
 8003478:	eb04 0903 	add.w	r9, r4, r3
 800347c:	f000 fb60 	bl	8003b40 <_sbrk_r>
 8003480:	4581      	cmp	r9, r0
 8003482:	d142      	bne.n	800350a <_malloc_r+0xea>
 8003484:	6821      	ldr	r1, [r4, #0]
 8003486:	4630      	mov	r0, r6
 8003488:	1a6d      	subs	r5, r5, r1
 800348a:	4629      	mov	r1, r5
 800348c:	f7ff ffa6 	bl	80033dc <sbrk_aligned>
 8003490:	3001      	adds	r0, #1
 8003492:	d03a      	beq.n	800350a <_malloc_r+0xea>
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	442b      	add	r3, r5
 8003498:	6023      	str	r3, [r4, #0]
 800349a:	f8d8 3000 	ldr.w	r3, [r8]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	bb62      	cbnz	r2, 80034fc <_malloc_r+0xdc>
 80034a2:	f8c8 7000 	str.w	r7, [r8]
 80034a6:	e00f      	b.n	80034c8 <_malloc_r+0xa8>
 80034a8:	6822      	ldr	r2, [r4, #0]
 80034aa:	1b52      	subs	r2, r2, r5
 80034ac:	d420      	bmi.n	80034f0 <_malloc_r+0xd0>
 80034ae:	2a0b      	cmp	r2, #11
 80034b0:	d917      	bls.n	80034e2 <_malloc_r+0xc2>
 80034b2:	1961      	adds	r1, r4, r5
 80034b4:	42a3      	cmp	r3, r4
 80034b6:	6025      	str	r5, [r4, #0]
 80034b8:	bf18      	it	ne
 80034ba:	6059      	strne	r1, [r3, #4]
 80034bc:	6863      	ldr	r3, [r4, #4]
 80034be:	bf08      	it	eq
 80034c0:	f8c8 1000 	streq.w	r1, [r8]
 80034c4:	5162      	str	r2, [r4, r5]
 80034c6:	604b      	str	r3, [r1, #4]
 80034c8:	4630      	mov	r0, r6
 80034ca:	f000 f82f 	bl	800352c <__malloc_unlock>
 80034ce:	f104 000b 	add.w	r0, r4, #11
 80034d2:	1d23      	adds	r3, r4, #4
 80034d4:	f020 0007 	bic.w	r0, r0, #7
 80034d8:	1ac2      	subs	r2, r0, r3
 80034da:	bf1c      	itt	ne
 80034dc:	1a1b      	subne	r3, r3, r0
 80034de:	50a3      	strne	r3, [r4, r2]
 80034e0:	e7af      	b.n	8003442 <_malloc_r+0x22>
 80034e2:	6862      	ldr	r2, [r4, #4]
 80034e4:	42a3      	cmp	r3, r4
 80034e6:	bf0c      	ite	eq
 80034e8:	f8c8 2000 	streq.w	r2, [r8]
 80034ec:	605a      	strne	r2, [r3, #4]
 80034ee:	e7eb      	b.n	80034c8 <_malloc_r+0xa8>
 80034f0:	4623      	mov	r3, r4
 80034f2:	6864      	ldr	r4, [r4, #4]
 80034f4:	e7ae      	b.n	8003454 <_malloc_r+0x34>
 80034f6:	463c      	mov	r4, r7
 80034f8:	687f      	ldr	r7, [r7, #4]
 80034fa:	e7b6      	b.n	800346a <_malloc_r+0x4a>
 80034fc:	461a      	mov	r2, r3
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	42a3      	cmp	r3, r4
 8003502:	d1fb      	bne.n	80034fc <_malloc_r+0xdc>
 8003504:	2300      	movs	r3, #0
 8003506:	6053      	str	r3, [r2, #4]
 8003508:	e7de      	b.n	80034c8 <_malloc_r+0xa8>
 800350a:	230c      	movs	r3, #12
 800350c:	4630      	mov	r0, r6
 800350e:	6033      	str	r3, [r6, #0]
 8003510:	f000 f80c 	bl	800352c <__malloc_unlock>
 8003514:	e794      	b.n	8003440 <_malloc_r+0x20>
 8003516:	6005      	str	r5, [r0, #0]
 8003518:	e7d6      	b.n	80034c8 <_malloc_r+0xa8>
 800351a:	bf00      	nop
 800351c:	2000069c 	.word	0x2000069c

08003520 <__malloc_lock>:
 8003520:	4801      	ldr	r0, [pc, #4]	@ (8003528 <__malloc_lock+0x8>)
 8003522:	f7ff bf11 	b.w	8003348 <__retarget_lock_acquire_recursive>
 8003526:	bf00      	nop
 8003528:	20000694 	.word	0x20000694

0800352c <__malloc_unlock>:
 800352c:	4801      	ldr	r0, [pc, #4]	@ (8003534 <__malloc_unlock+0x8>)
 800352e:	f7ff bf0c 	b.w	800334a <__retarget_lock_release_recursive>
 8003532:	bf00      	nop
 8003534:	20000694 	.word	0x20000694

08003538 <__ssputs_r>:
 8003538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800353c:	461f      	mov	r7, r3
 800353e:	688e      	ldr	r6, [r1, #8]
 8003540:	4682      	mov	sl, r0
 8003542:	42be      	cmp	r6, r7
 8003544:	460c      	mov	r4, r1
 8003546:	4690      	mov	r8, r2
 8003548:	680b      	ldr	r3, [r1, #0]
 800354a:	d82d      	bhi.n	80035a8 <__ssputs_r+0x70>
 800354c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003550:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003554:	d026      	beq.n	80035a4 <__ssputs_r+0x6c>
 8003556:	6965      	ldr	r5, [r4, #20]
 8003558:	6909      	ldr	r1, [r1, #16]
 800355a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800355e:	eba3 0901 	sub.w	r9, r3, r1
 8003562:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003566:	1c7b      	adds	r3, r7, #1
 8003568:	444b      	add	r3, r9
 800356a:	106d      	asrs	r5, r5, #1
 800356c:	429d      	cmp	r5, r3
 800356e:	bf38      	it	cc
 8003570:	461d      	movcc	r5, r3
 8003572:	0553      	lsls	r3, r2, #21
 8003574:	d527      	bpl.n	80035c6 <__ssputs_r+0x8e>
 8003576:	4629      	mov	r1, r5
 8003578:	f7ff ff52 	bl	8003420 <_malloc_r>
 800357c:	4606      	mov	r6, r0
 800357e:	b360      	cbz	r0, 80035da <__ssputs_r+0xa2>
 8003580:	464a      	mov	r2, r9
 8003582:	6921      	ldr	r1, [r4, #16]
 8003584:	f000 fafa 	bl	8003b7c <memcpy>
 8003588:	89a3      	ldrh	r3, [r4, #12]
 800358a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800358e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003592:	81a3      	strh	r3, [r4, #12]
 8003594:	6126      	str	r6, [r4, #16]
 8003596:	444e      	add	r6, r9
 8003598:	6026      	str	r6, [r4, #0]
 800359a:	463e      	mov	r6, r7
 800359c:	6165      	str	r5, [r4, #20]
 800359e:	eba5 0509 	sub.w	r5, r5, r9
 80035a2:	60a5      	str	r5, [r4, #8]
 80035a4:	42be      	cmp	r6, r7
 80035a6:	d900      	bls.n	80035aa <__ssputs_r+0x72>
 80035a8:	463e      	mov	r6, r7
 80035aa:	4632      	mov	r2, r6
 80035ac:	4641      	mov	r1, r8
 80035ae:	6820      	ldr	r0, [r4, #0]
 80035b0:	f000 faac 	bl	8003b0c <memmove>
 80035b4:	2000      	movs	r0, #0
 80035b6:	68a3      	ldr	r3, [r4, #8]
 80035b8:	1b9b      	subs	r3, r3, r6
 80035ba:	60a3      	str	r3, [r4, #8]
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	4433      	add	r3, r6
 80035c0:	6023      	str	r3, [r4, #0]
 80035c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035c6:	462a      	mov	r2, r5
 80035c8:	f000 fae6 	bl	8003b98 <_realloc_r>
 80035cc:	4606      	mov	r6, r0
 80035ce:	2800      	cmp	r0, #0
 80035d0:	d1e0      	bne.n	8003594 <__ssputs_r+0x5c>
 80035d2:	4650      	mov	r0, sl
 80035d4:	6921      	ldr	r1, [r4, #16]
 80035d6:	f7ff feb9 	bl	800334c <_free_r>
 80035da:	230c      	movs	r3, #12
 80035dc:	f8ca 3000 	str.w	r3, [sl]
 80035e0:	89a3      	ldrh	r3, [r4, #12]
 80035e2:	f04f 30ff 	mov.w	r0, #4294967295
 80035e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035ea:	81a3      	strh	r3, [r4, #12]
 80035ec:	e7e9      	b.n	80035c2 <__ssputs_r+0x8a>
	...

080035f0 <_svfiprintf_r>:
 80035f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035f4:	4698      	mov	r8, r3
 80035f6:	898b      	ldrh	r3, [r1, #12]
 80035f8:	4607      	mov	r7, r0
 80035fa:	061b      	lsls	r3, r3, #24
 80035fc:	460d      	mov	r5, r1
 80035fe:	4614      	mov	r4, r2
 8003600:	b09d      	sub	sp, #116	@ 0x74
 8003602:	d510      	bpl.n	8003626 <_svfiprintf_r+0x36>
 8003604:	690b      	ldr	r3, [r1, #16]
 8003606:	b973      	cbnz	r3, 8003626 <_svfiprintf_r+0x36>
 8003608:	2140      	movs	r1, #64	@ 0x40
 800360a:	f7ff ff09 	bl	8003420 <_malloc_r>
 800360e:	6028      	str	r0, [r5, #0]
 8003610:	6128      	str	r0, [r5, #16]
 8003612:	b930      	cbnz	r0, 8003622 <_svfiprintf_r+0x32>
 8003614:	230c      	movs	r3, #12
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	f04f 30ff 	mov.w	r0, #4294967295
 800361c:	b01d      	add	sp, #116	@ 0x74
 800361e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003622:	2340      	movs	r3, #64	@ 0x40
 8003624:	616b      	str	r3, [r5, #20]
 8003626:	2300      	movs	r3, #0
 8003628:	9309      	str	r3, [sp, #36]	@ 0x24
 800362a:	2320      	movs	r3, #32
 800362c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003630:	2330      	movs	r3, #48	@ 0x30
 8003632:	f04f 0901 	mov.w	r9, #1
 8003636:	f8cd 800c 	str.w	r8, [sp, #12]
 800363a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80037d4 <_svfiprintf_r+0x1e4>
 800363e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003642:	4623      	mov	r3, r4
 8003644:	469a      	mov	sl, r3
 8003646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800364a:	b10a      	cbz	r2, 8003650 <_svfiprintf_r+0x60>
 800364c:	2a25      	cmp	r2, #37	@ 0x25
 800364e:	d1f9      	bne.n	8003644 <_svfiprintf_r+0x54>
 8003650:	ebba 0b04 	subs.w	fp, sl, r4
 8003654:	d00b      	beq.n	800366e <_svfiprintf_r+0x7e>
 8003656:	465b      	mov	r3, fp
 8003658:	4622      	mov	r2, r4
 800365a:	4629      	mov	r1, r5
 800365c:	4638      	mov	r0, r7
 800365e:	f7ff ff6b 	bl	8003538 <__ssputs_r>
 8003662:	3001      	adds	r0, #1
 8003664:	f000 80a7 	beq.w	80037b6 <_svfiprintf_r+0x1c6>
 8003668:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800366a:	445a      	add	r2, fp
 800366c:	9209      	str	r2, [sp, #36]	@ 0x24
 800366e:	f89a 3000 	ldrb.w	r3, [sl]
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 809f 	beq.w	80037b6 <_svfiprintf_r+0x1c6>
 8003678:	2300      	movs	r3, #0
 800367a:	f04f 32ff 	mov.w	r2, #4294967295
 800367e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003682:	f10a 0a01 	add.w	sl, sl, #1
 8003686:	9304      	str	r3, [sp, #16]
 8003688:	9307      	str	r3, [sp, #28]
 800368a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800368e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003690:	4654      	mov	r4, sl
 8003692:	2205      	movs	r2, #5
 8003694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003698:	484e      	ldr	r0, [pc, #312]	@ (80037d4 <_svfiprintf_r+0x1e4>)
 800369a:	f000 fa61 	bl	8003b60 <memchr>
 800369e:	9a04      	ldr	r2, [sp, #16]
 80036a0:	b9d8      	cbnz	r0, 80036da <_svfiprintf_r+0xea>
 80036a2:	06d0      	lsls	r0, r2, #27
 80036a4:	bf44      	itt	mi
 80036a6:	2320      	movmi	r3, #32
 80036a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036ac:	0711      	lsls	r1, r2, #28
 80036ae:	bf44      	itt	mi
 80036b0:	232b      	movmi	r3, #43	@ 0x2b
 80036b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036b6:	f89a 3000 	ldrb.w	r3, [sl]
 80036ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80036bc:	d015      	beq.n	80036ea <_svfiprintf_r+0xfa>
 80036be:	4654      	mov	r4, sl
 80036c0:	2000      	movs	r0, #0
 80036c2:	f04f 0c0a 	mov.w	ip, #10
 80036c6:	9a07      	ldr	r2, [sp, #28]
 80036c8:	4621      	mov	r1, r4
 80036ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036ce:	3b30      	subs	r3, #48	@ 0x30
 80036d0:	2b09      	cmp	r3, #9
 80036d2:	d94b      	bls.n	800376c <_svfiprintf_r+0x17c>
 80036d4:	b1b0      	cbz	r0, 8003704 <_svfiprintf_r+0x114>
 80036d6:	9207      	str	r2, [sp, #28]
 80036d8:	e014      	b.n	8003704 <_svfiprintf_r+0x114>
 80036da:	eba0 0308 	sub.w	r3, r0, r8
 80036de:	fa09 f303 	lsl.w	r3, r9, r3
 80036e2:	4313      	orrs	r3, r2
 80036e4:	46a2      	mov	sl, r4
 80036e6:	9304      	str	r3, [sp, #16]
 80036e8:	e7d2      	b.n	8003690 <_svfiprintf_r+0xa0>
 80036ea:	9b03      	ldr	r3, [sp, #12]
 80036ec:	1d19      	adds	r1, r3, #4
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	9103      	str	r1, [sp, #12]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	bfbb      	ittet	lt
 80036f6:	425b      	neglt	r3, r3
 80036f8:	f042 0202 	orrlt.w	r2, r2, #2
 80036fc:	9307      	strge	r3, [sp, #28]
 80036fe:	9307      	strlt	r3, [sp, #28]
 8003700:	bfb8      	it	lt
 8003702:	9204      	strlt	r2, [sp, #16]
 8003704:	7823      	ldrb	r3, [r4, #0]
 8003706:	2b2e      	cmp	r3, #46	@ 0x2e
 8003708:	d10a      	bne.n	8003720 <_svfiprintf_r+0x130>
 800370a:	7863      	ldrb	r3, [r4, #1]
 800370c:	2b2a      	cmp	r3, #42	@ 0x2a
 800370e:	d132      	bne.n	8003776 <_svfiprintf_r+0x186>
 8003710:	9b03      	ldr	r3, [sp, #12]
 8003712:	3402      	adds	r4, #2
 8003714:	1d1a      	adds	r2, r3, #4
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	9203      	str	r2, [sp, #12]
 800371a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800371e:	9305      	str	r3, [sp, #20]
 8003720:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80037d8 <_svfiprintf_r+0x1e8>
 8003724:	2203      	movs	r2, #3
 8003726:	4650      	mov	r0, sl
 8003728:	7821      	ldrb	r1, [r4, #0]
 800372a:	f000 fa19 	bl	8003b60 <memchr>
 800372e:	b138      	cbz	r0, 8003740 <_svfiprintf_r+0x150>
 8003730:	2240      	movs	r2, #64	@ 0x40
 8003732:	9b04      	ldr	r3, [sp, #16]
 8003734:	eba0 000a 	sub.w	r0, r0, sl
 8003738:	4082      	lsls	r2, r0
 800373a:	4313      	orrs	r3, r2
 800373c:	3401      	adds	r4, #1
 800373e:	9304      	str	r3, [sp, #16]
 8003740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003744:	2206      	movs	r2, #6
 8003746:	4825      	ldr	r0, [pc, #148]	@ (80037dc <_svfiprintf_r+0x1ec>)
 8003748:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800374c:	f000 fa08 	bl	8003b60 <memchr>
 8003750:	2800      	cmp	r0, #0
 8003752:	d036      	beq.n	80037c2 <_svfiprintf_r+0x1d2>
 8003754:	4b22      	ldr	r3, [pc, #136]	@ (80037e0 <_svfiprintf_r+0x1f0>)
 8003756:	bb1b      	cbnz	r3, 80037a0 <_svfiprintf_r+0x1b0>
 8003758:	9b03      	ldr	r3, [sp, #12]
 800375a:	3307      	adds	r3, #7
 800375c:	f023 0307 	bic.w	r3, r3, #7
 8003760:	3308      	adds	r3, #8
 8003762:	9303      	str	r3, [sp, #12]
 8003764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003766:	4433      	add	r3, r6
 8003768:	9309      	str	r3, [sp, #36]	@ 0x24
 800376a:	e76a      	b.n	8003642 <_svfiprintf_r+0x52>
 800376c:	460c      	mov	r4, r1
 800376e:	2001      	movs	r0, #1
 8003770:	fb0c 3202 	mla	r2, ip, r2, r3
 8003774:	e7a8      	b.n	80036c8 <_svfiprintf_r+0xd8>
 8003776:	2300      	movs	r3, #0
 8003778:	f04f 0c0a 	mov.w	ip, #10
 800377c:	4619      	mov	r1, r3
 800377e:	3401      	adds	r4, #1
 8003780:	9305      	str	r3, [sp, #20]
 8003782:	4620      	mov	r0, r4
 8003784:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003788:	3a30      	subs	r2, #48	@ 0x30
 800378a:	2a09      	cmp	r2, #9
 800378c:	d903      	bls.n	8003796 <_svfiprintf_r+0x1a6>
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0c6      	beq.n	8003720 <_svfiprintf_r+0x130>
 8003792:	9105      	str	r1, [sp, #20]
 8003794:	e7c4      	b.n	8003720 <_svfiprintf_r+0x130>
 8003796:	4604      	mov	r4, r0
 8003798:	2301      	movs	r3, #1
 800379a:	fb0c 2101 	mla	r1, ip, r1, r2
 800379e:	e7f0      	b.n	8003782 <_svfiprintf_r+0x192>
 80037a0:	ab03      	add	r3, sp, #12
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	462a      	mov	r2, r5
 80037a6:	4638      	mov	r0, r7
 80037a8:	4b0e      	ldr	r3, [pc, #56]	@ (80037e4 <_svfiprintf_r+0x1f4>)
 80037aa:	a904      	add	r1, sp, #16
 80037ac:	f3af 8000 	nop.w
 80037b0:	1c42      	adds	r2, r0, #1
 80037b2:	4606      	mov	r6, r0
 80037b4:	d1d6      	bne.n	8003764 <_svfiprintf_r+0x174>
 80037b6:	89ab      	ldrh	r3, [r5, #12]
 80037b8:	065b      	lsls	r3, r3, #25
 80037ba:	f53f af2d 	bmi.w	8003618 <_svfiprintf_r+0x28>
 80037be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80037c0:	e72c      	b.n	800361c <_svfiprintf_r+0x2c>
 80037c2:	ab03      	add	r3, sp, #12
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	462a      	mov	r2, r5
 80037c8:	4638      	mov	r0, r7
 80037ca:	4b06      	ldr	r3, [pc, #24]	@ (80037e4 <_svfiprintf_r+0x1f4>)
 80037cc:	a904      	add	r1, sp, #16
 80037ce:	f000 f87d 	bl	80038cc <_printf_i>
 80037d2:	e7ed      	b.n	80037b0 <_svfiprintf_r+0x1c0>
 80037d4:	080043f6 	.word	0x080043f6
 80037d8:	080043fc 	.word	0x080043fc
 80037dc:	08004400 	.word	0x08004400
 80037e0:	00000000 	.word	0x00000000
 80037e4:	08003539 	.word	0x08003539

080037e8 <_printf_common>:
 80037e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037ec:	4616      	mov	r6, r2
 80037ee:	4698      	mov	r8, r3
 80037f0:	688a      	ldr	r2, [r1, #8]
 80037f2:	690b      	ldr	r3, [r1, #16]
 80037f4:	4607      	mov	r7, r0
 80037f6:	4293      	cmp	r3, r2
 80037f8:	bfb8      	it	lt
 80037fa:	4613      	movlt	r3, r2
 80037fc:	6033      	str	r3, [r6, #0]
 80037fe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003802:	460c      	mov	r4, r1
 8003804:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003808:	b10a      	cbz	r2, 800380e <_printf_common+0x26>
 800380a:	3301      	adds	r3, #1
 800380c:	6033      	str	r3, [r6, #0]
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	0699      	lsls	r1, r3, #26
 8003812:	bf42      	ittt	mi
 8003814:	6833      	ldrmi	r3, [r6, #0]
 8003816:	3302      	addmi	r3, #2
 8003818:	6033      	strmi	r3, [r6, #0]
 800381a:	6825      	ldr	r5, [r4, #0]
 800381c:	f015 0506 	ands.w	r5, r5, #6
 8003820:	d106      	bne.n	8003830 <_printf_common+0x48>
 8003822:	f104 0a19 	add.w	sl, r4, #25
 8003826:	68e3      	ldr	r3, [r4, #12]
 8003828:	6832      	ldr	r2, [r6, #0]
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	42ab      	cmp	r3, r5
 800382e:	dc2b      	bgt.n	8003888 <_printf_common+0xa0>
 8003830:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003834:	6822      	ldr	r2, [r4, #0]
 8003836:	3b00      	subs	r3, #0
 8003838:	bf18      	it	ne
 800383a:	2301      	movne	r3, #1
 800383c:	0692      	lsls	r2, r2, #26
 800383e:	d430      	bmi.n	80038a2 <_printf_common+0xba>
 8003840:	4641      	mov	r1, r8
 8003842:	4638      	mov	r0, r7
 8003844:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003848:	47c8      	blx	r9
 800384a:	3001      	adds	r0, #1
 800384c:	d023      	beq.n	8003896 <_printf_common+0xae>
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	6922      	ldr	r2, [r4, #16]
 8003852:	f003 0306 	and.w	r3, r3, #6
 8003856:	2b04      	cmp	r3, #4
 8003858:	bf14      	ite	ne
 800385a:	2500      	movne	r5, #0
 800385c:	6833      	ldreq	r3, [r6, #0]
 800385e:	f04f 0600 	mov.w	r6, #0
 8003862:	bf08      	it	eq
 8003864:	68e5      	ldreq	r5, [r4, #12]
 8003866:	f104 041a 	add.w	r4, r4, #26
 800386a:	bf08      	it	eq
 800386c:	1aed      	subeq	r5, r5, r3
 800386e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003872:	bf08      	it	eq
 8003874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003878:	4293      	cmp	r3, r2
 800387a:	bfc4      	itt	gt
 800387c:	1a9b      	subgt	r3, r3, r2
 800387e:	18ed      	addgt	r5, r5, r3
 8003880:	42b5      	cmp	r5, r6
 8003882:	d11a      	bne.n	80038ba <_printf_common+0xd2>
 8003884:	2000      	movs	r0, #0
 8003886:	e008      	b.n	800389a <_printf_common+0xb2>
 8003888:	2301      	movs	r3, #1
 800388a:	4652      	mov	r2, sl
 800388c:	4641      	mov	r1, r8
 800388e:	4638      	mov	r0, r7
 8003890:	47c8      	blx	r9
 8003892:	3001      	adds	r0, #1
 8003894:	d103      	bne.n	800389e <_printf_common+0xb6>
 8003896:	f04f 30ff 	mov.w	r0, #4294967295
 800389a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800389e:	3501      	adds	r5, #1
 80038a0:	e7c1      	b.n	8003826 <_printf_common+0x3e>
 80038a2:	2030      	movs	r0, #48	@ 0x30
 80038a4:	18e1      	adds	r1, r4, r3
 80038a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80038b0:	4422      	add	r2, r4
 80038b2:	3302      	adds	r3, #2
 80038b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80038b8:	e7c2      	b.n	8003840 <_printf_common+0x58>
 80038ba:	2301      	movs	r3, #1
 80038bc:	4622      	mov	r2, r4
 80038be:	4641      	mov	r1, r8
 80038c0:	4638      	mov	r0, r7
 80038c2:	47c8      	blx	r9
 80038c4:	3001      	adds	r0, #1
 80038c6:	d0e6      	beq.n	8003896 <_printf_common+0xae>
 80038c8:	3601      	adds	r6, #1
 80038ca:	e7d9      	b.n	8003880 <_printf_common+0x98>

080038cc <_printf_i>:
 80038cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038d0:	7e0f      	ldrb	r7, [r1, #24]
 80038d2:	4691      	mov	r9, r2
 80038d4:	2f78      	cmp	r7, #120	@ 0x78
 80038d6:	4680      	mov	r8, r0
 80038d8:	460c      	mov	r4, r1
 80038da:	469a      	mov	sl, r3
 80038dc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80038de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80038e2:	d807      	bhi.n	80038f4 <_printf_i+0x28>
 80038e4:	2f62      	cmp	r7, #98	@ 0x62
 80038e6:	d80a      	bhi.n	80038fe <_printf_i+0x32>
 80038e8:	2f00      	cmp	r7, #0
 80038ea:	f000 80d3 	beq.w	8003a94 <_printf_i+0x1c8>
 80038ee:	2f58      	cmp	r7, #88	@ 0x58
 80038f0:	f000 80ba 	beq.w	8003a68 <_printf_i+0x19c>
 80038f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80038fc:	e03a      	b.n	8003974 <_printf_i+0xa8>
 80038fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003902:	2b15      	cmp	r3, #21
 8003904:	d8f6      	bhi.n	80038f4 <_printf_i+0x28>
 8003906:	a101      	add	r1, pc, #4	@ (adr r1, 800390c <_printf_i+0x40>)
 8003908:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800390c:	08003965 	.word	0x08003965
 8003910:	08003979 	.word	0x08003979
 8003914:	080038f5 	.word	0x080038f5
 8003918:	080038f5 	.word	0x080038f5
 800391c:	080038f5 	.word	0x080038f5
 8003920:	080038f5 	.word	0x080038f5
 8003924:	08003979 	.word	0x08003979
 8003928:	080038f5 	.word	0x080038f5
 800392c:	080038f5 	.word	0x080038f5
 8003930:	080038f5 	.word	0x080038f5
 8003934:	080038f5 	.word	0x080038f5
 8003938:	08003a7b 	.word	0x08003a7b
 800393c:	080039a3 	.word	0x080039a3
 8003940:	08003a35 	.word	0x08003a35
 8003944:	080038f5 	.word	0x080038f5
 8003948:	080038f5 	.word	0x080038f5
 800394c:	08003a9d 	.word	0x08003a9d
 8003950:	080038f5 	.word	0x080038f5
 8003954:	080039a3 	.word	0x080039a3
 8003958:	080038f5 	.word	0x080038f5
 800395c:	080038f5 	.word	0x080038f5
 8003960:	08003a3d 	.word	0x08003a3d
 8003964:	6833      	ldr	r3, [r6, #0]
 8003966:	1d1a      	adds	r2, r3, #4
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6032      	str	r2, [r6, #0]
 800396c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003970:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003974:	2301      	movs	r3, #1
 8003976:	e09e      	b.n	8003ab6 <_printf_i+0x1ea>
 8003978:	6833      	ldr	r3, [r6, #0]
 800397a:	6820      	ldr	r0, [r4, #0]
 800397c:	1d19      	adds	r1, r3, #4
 800397e:	6031      	str	r1, [r6, #0]
 8003980:	0606      	lsls	r6, r0, #24
 8003982:	d501      	bpl.n	8003988 <_printf_i+0xbc>
 8003984:	681d      	ldr	r5, [r3, #0]
 8003986:	e003      	b.n	8003990 <_printf_i+0xc4>
 8003988:	0645      	lsls	r5, r0, #25
 800398a:	d5fb      	bpl.n	8003984 <_printf_i+0xb8>
 800398c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003990:	2d00      	cmp	r5, #0
 8003992:	da03      	bge.n	800399c <_printf_i+0xd0>
 8003994:	232d      	movs	r3, #45	@ 0x2d
 8003996:	426d      	negs	r5, r5
 8003998:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800399c:	230a      	movs	r3, #10
 800399e:	4859      	ldr	r0, [pc, #356]	@ (8003b04 <_printf_i+0x238>)
 80039a0:	e011      	b.n	80039c6 <_printf_i+0xfa>
 80039a2:	6821      	ldr	r1, [r4, #0]
 80039a4:	6833      	ldr	r3, [r6, #0]
 80039a6:	0608      	lsls	r0, r1, #24
 80039a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80039ac:	d402      	bmi.n	80039b4 <_printf_i+0xe8>
 80039ae:	0649      	lsls	r1, r1, #25
 80039b0:	bf48      	it	mi
 80039b2:	b2ad      	uxthmi	r5, r5
 80039b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80039b6:	6033      	str	r3, [r6, #0]
 80039b8:	bf14      	ite	ne
 80039ba:	230a      	movne	r3, #10
 80039bc:	2308      	moveq	r3, #8
 80039be:	4851      	ldr	r0, [pc, #324]	@ (8003b04 <_printf_i+0x238>)
 80039c0:	2100      	movs	r1, #0
 80039c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80039c6:	6866      	ldr	r6, [r4, #4]
 80039c8:	2e00      	cmp	r6, #0
 80039ca:	bfa8      	it	ge
 80039cc:	6821      	ldrge	r1, [r4, #0]
 80039ce:	60a6      	str	r6, [r4, #8]
 80039d0:	bfa4      	itt	ge
 80039d2:	f021 0104 	bicge.w	r1, r1, #4
 80039d6:	6021      	strge	r1, [r4, #0]
 80039d8:	b90d      	cbnz	r5, 80039de <_printf_i+0x112>
 80039da:	2e00      	cmp	r6, #0
 80039dc:	d04b      	beq.n	8003a76 <_printf_i+0x1aa>
 80039de:	4616      	mov	r6, r2
 80039e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80039e4:	fb03 5711 	mls	r7, r3, r1, r5
 80039e8:	5dc7      	ldrb	r7, [r0, r7]
 80039ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039ee:	462f      	mov	r7, r5
 80039f0:	42bb      	cmp	r3, r7
 80039f2:	460d      	mov	r5, r1
 80039f4:	d9f4      	bls.n	80039e0 <_printf_i+0x114>
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d10b      	bne.n	8003a12 <_printf_i+0x146>
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	07df      	lsls	r7, r3, #31
 80039fe:	d508      	bpl.n	8003a12 <_printf_i+0x146>
 8003a00:	6923      	ldr	r3, [r4, #16]
 8003a02:	6861      	ldr	r1, [r4, #4]
 8003a04:	4299      	cmp	r1, r3
 8003a06:	bfde      	ittt	le
 8003a08:	2330      	movle	r3, #48	@ 0x30
 8003a0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a0e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a12:	1b92      	subs	r2, r2, r6
 8003a14:	6122      	str	r2, [r4, #16]
 8003a16:	464b      	mov	r3, r9
 8003a18:	4621      	mov	r1, r4
 8003a1a:	4640      	mov	r0, r8
 8003a1c:	f8cd a000 	str.w	sl, [sp]
 8003a20:	aa03      	add	r2, sp, #12
 8003a22:	f7ff fee1 	bl	80037e8 <_printf_common>
 8003a26:	3001      	adds	r0, #1
 8003a28:	d14a      	bne.n	8003ac0 <_printf_i+0x1f4>
 8003a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a2e:	b004      	add	sp, #16
 8003a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	f043 0320 	orr.w	r3, r3, #32
 8003a3a:	6023      	str	r3, [r4, #0]
 8003a3c:	2778      	movs	r7, #120	@ 0x78
 8003a3e:	4832      	ldr	r0, [pc, #200]	@ (8003b08 <_printf_i+0x23c>)
 8003a40:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a44:	6823      	ldr	r3, [r4, #0]
 8003a46:	6831      	ldr	r1, [r6, #0]
 8003a48:	061f      	lsls	r7, r3, #24
 8003a4a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a4e:	d402      	bmi.n	8003a56 <_printf_i+0x18a>
 8003a50:	065f      	lsls	r7, r3, #25
 8003a52:	bf48      	it	mi
 8003a54:	b2ad      	uxthmi	r5, r5
 8003a56:	6031      	str	r1, [r6, #0]
 8003a58:	07d9      	lsls	r1, r3, #31
 8003a5a:	bf44      	itt	mi
 8003a5c:	f043 0320 	orrmi.w	r3, r3, #32
 8003a60:	6023      	strmi	r3, [r4, #0]
 8003a62:	b11d      	cbz	r5, 8003a6c <_printf_i+0x1a0>
 8003a64:	2310      	movs	r3, #16
 8003a66:	e7ab      	b.n	80039c0 <_printf_i+0xf4>
 8003a68:	4826      	ldr	r0, [pc, #152]	@ (8003b04 <_printf_i+0x238>)
 8003a6a:	e7e9      	b.n	8003a40 <_printf_i+0x174>
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	f023 0320 	bic.w	r3, r3, #32
 8003a72:	6023      	str	r3, [r4, #0]
 8003a74:	e7f6      	b.n	8003a64 <_printf_i+0x198>
 8003a76:	4616      	mov	r6, r2
 8003a78:	e7bd      	b.n	80039f6 <_printf_i+0x12a>
 8003a7a:	6833      	ldr	r3, [r6, #0]
 8003a7c:	6825      	ldr	r5, [r4, #0]
 8003a7e:	1d18      	adds	r0, r3, #4
 8003a80:	6961      	ldr	r1, [r4, #20]
 8003a82:	6030      	str	r0, [r6, #0]
 8003a84:	062e      	lsls	r6, r5, #24
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	d501      	bpl.n	8003a8e <_printf_i+0x1c2>
 8003a8a:	6019      	str	r1, [r3, #0]
 8003a8c:	e002      	b.n	8003a94 <_printf_i+0x1c8>
 8003a8e:	0668      	lsls	r0, r5, #25
 8003a90:	d5fb      	bpl.n	8003a8a <_printf_i+0x1be>
 8003a92:	8019      	strh	r1, [r3, #0]
 8003a94:	2300      	movs	r3, #0
 8003a96:	4616      	mov	r6, r2
 8003a98:	6123      	str	r3, [r4, #16]
 8003a9a:	e7bc      	b.n	8003a16 <_printf_i+0x14a>
 8003a9c:	6833      	ldr	r3, [r6, #0]
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	1d1a      	adds	r2, r3, #4
 8003aa2:	6032      	str	r2, [r6, #0]
 8003aa4:	681e      	ldr	r6, [r3, #0]
 8003aa6:	6862      	ldr	r2, [r4, #4]
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	f000 f859 	bl	8003b60 <memchr>
 8003aae:	b108      	cbz	r0, 8003ab4 <_printf_i+0x1e8>
 8003ab0:	1b80      	subs	r0, r0, r6
 8003ab2:	6060      	str	r0, [r4, #4]
 8003ab4:	6863      	ldr	r3, [r4, #4]
 8003ab6:	6123      	str	r3, [r4, #16]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003abe:	e7aa      	b.n	8003a16 <_printf_i+0x14a>
 8003ac0:	4632      	mov	r2, r6
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	4640      	mov	r0, r8
 8003ac6:	6923      	ldr	r3, [r4, #16]
 8003ac8:	47d0      	blx	sl
 8003aca:	3001      	adds	r0, #1
 8003acc:	d0ad      	beq.n	8003a2a <_printf_i+0x15e>
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	079b      	lsls	r3, r3, #30
 8003ad2:	d413      	bmi.n	8003afc <_printf_i+0x230>
 8003ad4:	68e0      	ldr	r0, [r4, #12]
 8003ad6:	9b03      	ldr	r3, [sp, #12]
 8003ad8:	4298      	cmp	r0, r3
 8003ada:	bfb8      	it	lt
 8003adc:	4618      	movlt	r0, r3
 8003ade:	e7a6      	b.n	8003a2e <_printf_i+0x162>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	4632      	mov	r2, r6
 8003ae4:	4649      	mov	r1, r9
 8003ae6:	4640      	mov	r0, r8
 8003ae8:	47d0      	blx	sl
 8003aea:	3001      	adds	r0, #1
 8003aec:	d09d      	beq.n	8003a2a <_printf_i+0x15e>
 8003aee:	3501      	adds	r5, #1
 8003af0:	68e3      	ldr	r3, [r4, #12]
 8003af2:	9903      	ldr	r1, [sp, #12]
 8003af4:	1a5b      	subs	r3, r3, r1
 8003af6:	42ab      	cmp	r3, r5
 8003af8:	dcf2      	bgt.n	8003ae0 <_printf_i+0x214>
 8003afa:	e7eb      	b.n	8003ad4 <_printf_i+0x208>
 8003afc:	2500      	movs	r5, #0
 8003afe:	f104 0619 	add.w	r6, r4, #25
 8003b02:	e7f5      	b.n	8003af0 <_printf_i+0x224>
 8003b04:	08004407 	.word	0x08004407
 8003b08:	08004418 	.word	0x08004418

08003b0c <memmove>:
 8003b0c:	4288      	cmp	r0, r1
 8003b0e:	b510      	push	{r4, lr}
 8003b10:	eb01 0402 	add.w	r4, r1, r2
 8003b14:	d902      	bls.n	8003b1c <memmove+0x10>
 8003b16:	4284      	cmp	r4, r0
 8003b18:	4623      	mov	r3, r4
 8003b1a:	d807      	bhi.n	8003b2c <memmove+0x20>
 8003b1c:	1e43      	subs	r3, r0, #1
 8003b1e:	42a1      	cmp	r1, r4
 8003b20:	d008      	beq.n	8003b34 <memmove+0x28>
 8003b22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b2a:	e7f8      	b.n	8003b1e <memmove+0x12>
 8003b2c:	4601      	mov	r1, r0
 8003b2e:	4402      	add	r2, r0
 8003b30:	428a      	cmp	r2, r1
 8003b32:	d100      	bne.n	8003b36 <memmove+0x2a>
 8003b34:	bd10      	pop	{r4, pc}
 8003b36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b3e:	e7f7      	b.n	8003b30 <memmove+0x24>

08003b40 <_sbrk_r>:
 8003b40:	b538      	push	{r3, r4, r5, lr}
 8003b42:	2300      	movs	r3, #0
 8003b44:	4d05      	ldr	r5, [pc, #20]	@ (8003b5c <_sbrk_r+0x1c>)
 8003b46:	4604      	mov	r4, r0
 8003b48:	4608      	mov	r0, r1
 8003b4a:	602b      	str	r3, [r5, #0]
 8003b4c:	f7fd f8cc 	bl	8000ce8 <_sbrk>
 8003b50:	1c43      	adds	r3, r0, #1
 8003b52:	d102      	bne.n	8003b5a <_sbrk_r+0x1a>
 8003b54:	682b      	ldr	r3, [r5, #0]
 8003b56:	b103      	cbz	r3, 8003b5a <_sbrk_r+0x1a>
 8003b58:	6023      	str	r3, [r4, #0]
 8003b5a:	bd38      	pop	{r3, r4, r5, pc}
 8003b5c:	20000690 	.word	0x20000690

08003b60 <memchr>:
 8003b60:	4603      	mov	r3, r0
 8003b62:	b510      	push	{r4, lr}
 8003b64:	b2c9      	uxtb	r1, r1
 8003b66:	4402      	add	r2, r0
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	d101      	bne.n	8003b72 <memchr+0x12>
 8003b6e:	2000      	movs	r0, #0
 8003b70:	e003      	b.n	8003b7a <memchr+0x1a>
 8003b72:	7804      	ldrb	r4, [r0, #0]
 8003b74:	3301      	adds	r3, #1
 8003b76:	428c      	cmp	r4, r1
 8003b78:	d1f6      	bne.n	8003b68 <memchr+0x8>
 8003b7a:	bd10      	pop	{r4, pc}

08003b7c <memcpy>:
 8003b7c:	440a      	add	r2, r1
 8003b7e:	4291      	cmp	r1, r2
 8003b80:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b84:	d100      	bne.n	8003b88 <memcpy+0xc>
 8003b86:	4770      	bx	lr
 8003b88:	b510      	push	{r4, lr}
 8003b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b8e:	4291      	cmp	r1, r2
 8003b90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b94:	d1f9      	bne.n	8003b8a <memcpy+0xe>
 8003b96:	bd10      	pop	{r4, pc}

08003b98 <_realloc_r>:
 8003b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b9c:	4680      	mov	r8, r0
 8003b9e:	4615      	mov	r5, r2
 8003ba0:	460c      	mov	r4, r1
 8003ba2:	b921      	cbnz	r1, 8003bae <_realloc_r+0x16>
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003baa:	f7ff bc39 	b.w	8003420 <_malloc_r>
 8003bae:	b92a      	cbnz	r2, 8003bbc <_realloc_r+0x24>
 8003bb0:	f7ff fbcc 	bl	800334c <_free_r>
 8003bb4:	2400      	movs	r4, #0
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bbc:	f000 f81a 	bl	8003bf4 <_malloc_usable_size_r>
 8003bc0:	4285      	cmp	r5, r0
 8003bc2:	4606      	mov	r6, r0
 8003bc4:	d802      	bhi.n	8003bcc <_realloc_r+0x34>
 8003bc6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003bca:	d8f4      	bhi.n	8003bb6 <_realloc_r+0x1e>
 8003bcc:	4629      	mov	r1, r5
 8003bce:	4640      	mov	r0, r8
 8003bd0:	f7ff fc26 	bl	8003420 <_malloc_r>
 8003bd4:	4607      	mov	r7, r0
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	d0ec      	beq.n	8003bb4 <_realloc_r+0x1c>
 8003bda:	42b5      	cmp	r5, r6
 8003bdc:	462a      	mov	r2, r5
 8003bde:	4621      	mov	r1, r4
 8003be0:	bf28      	it	cs
 8003be2:	4632      	movcs	r2, r6
 8003be4:	f7ff ffca 	bl	8003b7c <memcpy>
 8003be8:	4621      	mov	r1, r4
 8003bea:	4640      	mov	r0, r8
 8003bec:	f7ff fbae 	bl	800334c <_free_r>
 8003bf0:	463c      	mov	r4, r7
 8003bf2:	e7e0      	b.n	8003bb6 <_realloc_r+0x1e>

08003bf4 <_malloc_usable_size_r>:
 8003bf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bf8:	1f18      	subs	r0, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	bfbc      	itt	lt
 8003bfe:	580b      	ldrlt	r3, [r1, r0]
 8003c00:	18c0      	addlt	r0, r0, r3
 8003c02:	4770      	bx	lr

08003c04 <_init>:
 8003c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c06:	bf00      	nop
 8003c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0a:	bc08      	pop	{r3}
 8003c0c:	469e      	mov	lr, r3
 8003c0e:	4770      	bx	lr

08003c10 <_fini>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	bf00      	nop
 8003c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c16:	bc08      	pop	{r3}
 8003c18:	469e      	mov	lr, r3
 8003c1a:	4770      	bx	lr
